{
  "helix": [
    {
      "title": "Start Commercial",
      "authentication": "channel:edit:commercial",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "POST",
        "url": "https://api.twitch.tv/helix/channels/commercial"
      },
      "required_query_parameters": [],
      "required_body_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "ID of the channel requesting a commercial. Minimum: 1 Maximum: 1"
        },
        {
          "parameter": "length",
          "type": "integer",
          "description": "Desired length of the commercial in seconds. . Valid options are 30, 60, 90, 120, 150, 180."
        }
      ],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "length",
          "type": "integer",
          "description": "Length of the triggered commercial"
        },
        {
          "parameter": "message",
          "type": "string",
          "description": "Provides contextual information on why the request failed"
        },
        {
          "parameter": "retry_after",
          "type": "integer",
          "description": "Seconds until the next commercial can be served on this channel"
        }
      ]
    },
    {
      "title": "Get Extension Analytics",
      "authentication": "analytics:read:extensions",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/analytics/extensions"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "after",
          "type": "string",
          "description": "Cursor for forward pagination: tells the server where to start fetching the next set of results, in a multi-page response. This applies only to queries without extension_id. If an extension_id is specified, it supersedes any cursor/offset combinations. The cursor value specified here is from the pagination response field of a prior query."
        },
        {
          "parameter": "ended_at",
          "type": "string",
          "description": "Ending date/time for returned reports, in RFC3339 format with the hours, minutes, and seconds zeroed out and the UTC timezone: YYYY-MM-DDT00:00:00Z. The report covers the entire ending date; e.g., if 2018-05-01T00:00:00Z is specified, the report covers up to 2018-05-01T23:59:59Z.. . If this is provided, started_at also must be specified. If ended_at is later than the default end date, the default date is used. Default: 1-2 days before the request was issued (depending on report availability)."
        },
        {
          "parameter": "extension_id",
          "type": "string",
          "description": "Client ID value assigned to the extension when it is created. If this is specified, the returned URL points to an analytics report for just the specified extension. If this is not specified, the response includes multiple URLs (paginated), pointing to separate analytics reports for each of the authenticated user’s Extensions."
        },
        {
          "parameter": "first",
          "type": "integer",
          "description": "Maximum number of objects to return. Maximum: 100. Default: 20."
        },
        {
          "parameter": "started_at",
          "type": "string",
          "description": "Starting date/time for returned reports, in RFC3339 format with the hours, minutes, and seconds zeroed out and the UTC timezone: YYYY-MM-DDT00:00:00Z. This must be on or after January 31, 2018.. . If this is provided, ended_at also must be specified. If started_at is earlier than the default start date, the default date is used.  The file contains one row of data per day."
        },
        {
          "parameter": "type",
          "type": "string",
          "description": "Type of analytics report that is returned. Currently, this field has no affect on the response as there is only one report type. If additional types were added, using this field would return only the URL for the specified report. Limit: 1. Valid values: \"overview_v2\"."
        }
      ],
      "response_fields": [
        {
          "parameter": "ended_at",
          "type": "string",
          "description": "Report end date/time."
        },
        {
          "parameter": "extension_id",
          "type": "string",
          "description": "ID of the extension whose analytics data is being provided."
        },
        {
          "parameter": "pagination",
          "type": "object containing a string",
          "description": "A cursor value, to be used in a subsequent request to specify the starting point of the next set of results. This is returned only if extension_id is not specified in the request."
        },
        {
          "parameter": "started_at",
          "type": "string",
          "description": "Report start date/time. Note this may differ from (be later than) the started_at value in the request; the response value is the date when data for the extension is available."
        },
        {
          "parameter": "type",
          "type": "string",
          "description": "Type of report."
        },
        {
          "parameter": "URL",
          "type": "string",
          "description": "URL to the downloadable CSV file containing analytics data. Valid for 5 minutes."
        }
      ]
    },
    {
      "title": "Get Game Analytics",
      "authentication": "analytics:read:games",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/analytics/games"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "after",
          "type": "string",
          "description": "Cursor for forward pagination: tells the server where to start fetching the next set of results, in a multi-page response. This applies only to queries without game_id. If a game_id is specified, it supersedes any cursor/offset combinations. The cursor value specified here is from the pagination response field of a prior query."
        },
        {
          "parameter": "ended_at",
          "type": "string",
          "description": "Ending date/time for returned reports, in RFC3339 format with the hours, minutes, and seconds zeroed out and the UTC timezone: YYYY-MM-DDT00:00:00Z. The report covers the entire ending date; e.g., if 2018-05-01T00:00:00Z is specified, the report covers up to 2018-05-01T23:59:59Z.. . If this is provided, started_at also must be specified. If ended_at is later than the default end date, the default date is used. Default: 1-2 days before the request was issued (depending on report availability)."
        },
        {
          "parameter": "first",
          "type": "integer",
          "description": "Maximum number of objects to return. Maximum: 100. Default: 20."
        },
        {
          "parameter": "game_id",
          "type": "string",
          "description": "Game ID. If this is specified, the returned URL points to an analytics report for just the specified game. If this is not specified, the response includes multiple URLs (paginated), pointing to separate analytics reports for each of the authenticated user’s games."
        },
        {
          "parameter": "started_at",
          "type": "string",
          "description": "Starting date/time for returned reports, in RFC3339 format with the hours, minutes, and seconds zeroed out and the UTC timezone: YYYY-MM-DDT00:00:00Z.. . If this is provided, ended_at also must be specified. If started_at is earlier than the default start date, the default date is used. Default: 365 days before the report was issued. The file contains one row of data per day."
        },
        {
          "parameter": "type",
          "type": "string",
          "description": "Type of analytics report that is returned. Currently, this field has no affect on the response as there is only one report type. If additional types were added, using this field would return only the URL for the specified report. Limit: 1. Valid values: \"overview_v2\"."
        }
      ],
      "response_fields": [
        {
          "parameter": "ended_at",
          "type": "string",
          "description": "Report end date/time."
        },
        {
          "parameter": "game_id",
          "type": "string",
          "description": "ID of the game whose analytics data is being provided."
        },
        {
          "parameter": "pagination",
          "type": "Object containing a string",
          "description": "A cursor value, to be used in a subsequent request to specify the starting point of the next set of results. This is returned only if game_id is not specified in the request."
        },
        {
          "parameter": "started_at",
          "type": "string",
          "description": "Report start date/time."
        },
        {
          "parameter": "type",
          "type": "string",
          "description": "Type of report."
        },
        {
          "parameter": "URL",
          "type": "string",
          "description": "URL to the downloadable CSV file containing analytics data. Valid for 5 minutes."
        }
      ]
    },
    {
      "title": "Get Bits Leaderboard",
      "authentication": "bits:read",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/bits/leaderboard"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "count",
          "type": "integer",
          "description": "Number of results to be returned. Maximum: 100. Default: 10."
        },
        {
          "parameter": "period",
          "type": "string",
          "description": "Time period over which data is aggregated (PST time zone). This parameter interacts with started_at. Valid values follow. Default: \"all\".\"day\" &ndash; 00:00:00 on the day specified in started_at, through 00:00:00 on the following day.\"week\" &ndash; 00:00:00 on Monday of the week specified in started_at, through 00:00:00 on the following Monday.\"month\" &ndash; 00:00:00 on the first day of the month specified in started_at, through 00:00:00 on the first day of the following month.\"year\" &ndash; 00:00:00 on the first day of the year specified in started_at, through 00:00:00 on the first day of the following year.\"all\" &ndash; The lifetime of the broadcaster's channel. If this is specified (or used by default), started_at is ignored."
        },
        {
          "parameter": "started_at",
          "type": "string",
          "description": "Timestamp for the period over which the returned data is aggregated. Must be in RFC 3339 format. If this is not provided, data is aggregated over the current period; e.g., the current day/week/month/year. This value is ignored if period is \"all\".. . Any + operator should be URL encoded.. . Currently, the HH:MM:SS part of this value is used only to identify a given day in PST and otherwise ignored. For example, if the started_at value resolves to 5PM PST yesterday and period is \"day\", data is returned for all of yesterday."
        },
        {
          "parameter": "user_id",
          "type": "string",
          "description": "ID of the user whose results are returned; i.e., the person who paid for the Bits.. . As long as count is greater than 1, the returned data includes additional users, with Bits amounts above and below the user specified by user_id.. . If user_id is not provided, the endpoint returns the Bits leaderboard data across top users (subject to the value of count)."
        }
      ],
      "response_fields": [
        {
          "parameter": "ended_at",
          "type": "string",
          "description": "End of the date range for the returned data."
        },
        {
          "parameter": "rank",
          "type": "integer",
          "description": "Leaderboard rank of the user."
        },
        {
          "parameter": "score",
          "type": "integer",
          "description": "Leaderboard score (number of Bits) of the user."
        },
        {
          "parameter": "started_at",
          "type": "string",
          "description": "Start of the date range for the returned data."
        },
        {
          "parameter": "total",
          "type": "integer",
          "description": "Total number of results (users) returned. This is count or the total number of entries in the leaderboard, whichever is less."
        },
        {
          "parameter": "user_id",
          "type": "string",
          "description": "ID of the user (viewer) in the leaderboard entry."
        },
        {
          "parameter": "user_login",
          "type": "string",
          "description": "User login name."
        },
        {
          "parameter": "user_name",
          "type": "string",
          "description": "Display name corresponding to user_id."
        }
      ]
    },
    {
      "title": "Get Cheermotes",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/bits/cheermotes"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "prefix",
          "type": "string",
          "description": "The string used to Cheer that precedes the Bits amount."
        },
        {
          "parameter": "tiers",
          "type": "array",
          "description": "An array of Cheermotes with their metadata."
        },
        {
          "parameter": "min_bits",
          "type": "integer",
          "description": "Minimum number of bits needed to be used to hit the given tier of emote.  "
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "ID of the emote tier. Possible tiers are: 1,100,500,1000,5000, 10k, or 100k."
        },
        {
          "parameter": "color",
          "type": "string",
          "description": "Hex code for the color associated with the bits of that tier. Grey, Purple, Teal, Blue, or Red color to match the base bit type."
        },
        {
          "parameter": "images",
          "type": "object",
          "description": "Structure containing both animated and static image sets, sorted by light and dark."
        },
        {
          "parameter": "can_cheer",
          "type": "Boolean",
          "description": "Indicates whether or not emote information is accessible to users."
        },
        {
          "parameter": "show_in_bits_card",
          "type": "Boolean",
          "description": "Indicates whether or not we hide the emote from the bits card."
        },
        {
          "parameter": "type",
          "type": "string",
          "description": "Shows whether the emote is global_first_party,  global_third_party, channel_custom, display_only, or sponsored."
        },
        {
          "parameter": "order",
          "type": "integer",
          "description": "Order of the emotes as shown in the bits card, in ascending order."
        },
        {
          "parameter": "last_updated",
          "type": "string",
          "description": "The data when this Cheermote was last updated."
        },
        {
          "parameter": "is_charitable",
          "type": "Boolean",
          "description": "Indicates whether or not this emote provides a charity contribution match during charity campaigns."
        }
      ]
    },
    {
      "title": "Get Extension Transactions",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/extensions/transactions"
      },
      "required_query_parameters": [
        {
          "parameter": "extension_id",
          "type": "string",
          "description": "ID of the Extension to list transactions for.. . Maximum: 1"
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "id",
          "type": "string",
          "description": "Transaction IDs to look up. Can include multiple to fetch multiple transactions in a single request.. . For example, /helix/extensions/transactions?extension_id=1234&amp;id=1&amp;id=2&amp;id=3. . Maximum: 100."
        },
        {
          "parameter": "after",
          "type": "string",
          "description": "The cursor used to fetch the next page of data. This only applies to queries without ID. If an ID is specified, it supersedes the cursor."
        },
        {
          "parameter": "first",
          "type": "integer",
          "description": "Maximum number of objects to return.. . Maximum: 100. Default: 20."
        }
      ],
      "response_fields": [
        {
          "parameter": "data",
          "type": "array",
          "description": "Array of requested transactions."
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "Unique identifier of the Bits-in-Extensions transaction."
        },
        {
          "parameter": "timestamp",
          "type": "string",
          "description": "UTC timestamp when this transaction occurred."
        },
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "Twitch user ID of the channel the transaction occurred on."
        },
        {
          "parameter": "broadcaster_login",
          "type": "string",
          "description": "Login name of the broadcaster."
        },
        {
          "parameter": "broadcaster_name",
          "type": "string",
          "description": "Twitch display name of the broadcaster."
        },
        {
          "parameter": "user_id",
          "type": "string",
          "description": "Twitch user ID of the user who generated the transaction."
        },
        {
          "parameter": "user_login",
          "type": "string",
          "description": "Login name of the user who generated the transaction."
        },
        {
          "parameter": "user_name",
          "type": "string",
          "description": "Twitch display name of the user who generated the transaction."
        },
        {
          "parameter": "product_type",
          "type": "string",
          "description": "Enum of the product type. Currently only BITS_IN_EXTENSION."
        },
        {
          "parameter": "product_data",
          "type": "object",
          "description": "Represents the product acquired, as it looked at the time of the transaction."
        },
        {
          "parameter": "product_data.domain",
          "type": "string",
          "description": "Set to twitch.ext + your Extension ID."
        },
        {
          "parameter": "product_data.sku",
          "type": "string",
          "description": "Unique identifier for the product across the Extension."
        },
        {
          "parameter": "product_data.cost",
          "type": "object",
          "description": "Represents the cost to acquire the product."
        },
        {
          "parameter": "product_data.cost.amount",
          "type": "integer",
          "description": "Number of Bits required to acquire the product."
        },
        {
          "parameter": "product_data.cost.type",
          "type": "string",
          "description": "Identifies the contribution method. Currently only bits."
        },
        {
          "parameter": "product_data.inDevelopment",
          "type": "boolean",
          "description": "Indicates if the product is in development."
        },
        {
          "parameter": "product_data.displayName",
          "type": "string",
          "description": "Display name of the product."
        },
        {
          "parameter": "expiration",
          "type": "string",
          "description": "Always empty since only unexpired products can be purchased."
        },
        {
          "parameter": "broadcast",
          "type": "boolean",
          "description": "Indicates whether or not the data was sent over the Extension PubSub to all instances of the Extension."
        },
        {
          "parameter": "pagination",
          "type": "object containing a string",
          "description": "If provided, is the key used to fetch the next page of data. If not provided, the current response is the last page of data available."
        }
      ]
    },
    {
      "title": "Get Channel Information",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/channels"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "The ID of the broadcaster whose channel you want to get. To specify more than one ID, include this parameter for each broadcaster you want to get. For example, broadcaster_id=1234&amp;broadcaster_id=5678. You may specify a maximum of 100 IDs."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "Twitch User ID of this channel owner."
        },
        {
          "parameter": "broadcaster_login",
          "type": "string",
          "description": "Broadcaster’s user login name."
        },
        {
          "parameter": "broadcaster_name",
          "type": "string",
          "description": "Twitch user display name of this channel owner."
        },
        {
          "parameter": "game_name",
          "type": "string",
          "description": "Name of the game being played on the channel."
        },
        {
          "parameter": "game_id",
          "type": "string",
          "description": "Current game ID being played on the channel."
        },
        {
          "parameter": "broadcaster_language",
          "type": "string",
          "description": "Language of the channel. A language value is either the ISO 639-1 two-letter code for a supported stream language or “other”."
        },
        {
          "parameter": "title",
          "type": "string",
          "description": "Title of the stream."
        },
        {
          "parameter": "delay",
          "type": "integer",
          "description": "Stream delay in seconds."
        }
      ]
    },
    {
      "title": "Modify Channel Information",
      "authentication": "channel:manage:broadcast",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "PATCH",
        "url": "https://api.twitch.tv/helix/channels"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "ID of the channel to be updated"
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": []
    },
    {
      "title": "Get Channel Editors",
      "authentication": "channel:read:editors",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/channels/editors"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "Broadcaster’s user ID associated with the channel."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "user_id",
          "type": "string",
          "description": "User ID of the editor."
        },
        {
          "parameter": "user_name",
          "type": "string",
          "description": "Display name of the editor."
        },
        {
          "parameter": "created_at",
          "type": "string",
          "description": "Date and time the editor was given editor permissions."
        }
      ]
    },
    {
      "title": "Create Custom Rewards",
      "authentication": "channel:manage:redemptions",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "POST",
        "url": "https://api.twitch.tv/helix/channel_points/custom_rewards"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "Provided broadcaster_id must match the user_id in the user OAuth token."
        }
      ],
      "required_body_parameters": [
        {
          "parameter": "title",
          "type": "string",
          "description": "The title of the reward. The title may contain a maximum of 45 characters and it must be unique amongst all of the broadcaster’s custom rewards."
        },
        {
          "parameter": "cost",
          "type": "integer",
          "description": "The cost of the reward."
        }
      ],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "ID of the channel the reward is for."
        },
        {
          "parameter": "broadcaster_login",
          "type": "string",
          "description": "Broadcaster’s user login name."
        },
        {
          "parameter": "broadcaster_name",
          "type": "string",
          "description": "Display name of the channel the reward is for."
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "ID of the reward."
        },
        {
          "parameter": "title",
          "type": "string",
          "description": "The title of the reward."
        },
        {
          "parameter": "prompt",
          "type": "string",
          "description": "The prompt for the viewer when they are redeeming the reward."
        },
        {
          "parameter": "cost",
          "type": "integer",
          "description": "The cost of the reward."
        },
        {
          "parameter": "image",
          "type": "object",
          "description": "Set of custom images of 1x, 2x and 4x sizes for the reward { url_1x: string, url_2x: string, url_4x: string }, can be null if no images have been uploaded"
        },
        {
          "parameter": "default_image",
          "type": "object",
          "description": "Set of default images of 1x, 2x and 4x sizes for the reward { url_1x: string, url_2x: string, url_4x: string }"
        },
        {
          "parameter": "background_color",
          "type": "string",
          "description": "Custom background color for the reward. Format: Hex with # prefix. Example: #00E5CB."
        },
        {
          "parameter": "is_enabled",
          "type": "boolean",
          "description": "Is the reward currently enabled, if false the reward won’t show up to viewers"
        },
        {
          "parameter": "is_user_input_required",
          "type": "boolean",
          "description": "Does the user need to enter information when redeeming the reward"
        },
        {
          "parameter": "max_per_stream_setting",
          "type": "object",
          "description": "Whether a maximum per stream is enabled and what the maximum is. { is_enabled: bool, max_per_stream: int }"
        },
        {
          "parameter": "max_per_user_per_stream_setting",
          "type": "object",
          "description": "Whether a maximum per user per stream is enabled and what the maximum is. { is_enabled: bool, max_per_user_per_stream: int }"
        },
        {
          "parameter": "global_cooldown_setting",
          "type": "object",
          "description": "Whether a cooldown is enabled and what the cooldown is. { is_enabled: bool, global_cooldown_seconds: int }"
        },
        {
          "parameter": "is_paused",
          "type": "boolean",
          "description": "Is the reward currently paused, if true viewers can’t redeem"
        },
        {
          "parameter": "is_in_stock",
          "type": "boolean",
          "description": "Is the reward currently in stock, if false viewers can’t redeem"
        },
        {
          "parameter": "should_redemptions_skip_request_queue",
          "type": "boolean",
          "description": "Should redemptions be set to FULFILLED status immediately when redeemed and skip the request queue instead of the normal UNFULFILLED status."
        },
        {
          "parameter": "redemptions_redeemed_current_stream",
          "type": "integer",
          "description": "The number of redemptions redeemed during the current live stream. Counts against the max_per_stream_setting limit. Null if the broadcasters stream isn’t live or max_per_stream_setting isn’t enabled."
        },
        {
          "parameter": "cooldown_expires_at",
          "type": "string",
          "description": "Timestamp of the cooldown expiration. Null if the reward isn’t on cooldown."
        }
      ]
    },
    {
      "title": "Delete Custom Reward",
      "authentication": "channel:manage:redemptions",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "DELETE",
        "url": "https://api.twitch.tv/helix/channel_points/custom_rewards"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "Provided broadcaster_id must match the user_id in the user OAuth token."
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "ID of the Custom Reward to delete, must match a Custom Reward on broadcaster_id’s channel."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": []
    },
    {
      "title": "Get Custom Reward",
      "authentication": "channel:read:redemptions",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/channel_points/custom_rewards"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "Provided broadcaster_id must match the user_id in the user OAuth token."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "id",
          "type": "string",
          "description": "When used, this parameter filters the results and only returns reward objects for the Custom Rewards with matching ID. Maximum: 50"
        },
        {
          "parameter": "only_manageable_rewards",
          "type": "Boolean",
          "description": "When set to true, only returns custom rewards that the calling client_id can manage. Default: false."
        }
      ],
      "response_fields": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "ID of the channel the reward is for."
        },
        {
          "parameter": "broadcaster_login",
          "type": "string",
          "description": "Login of the channel the reward is for."
        },
        {
          "parameter": "broadcaster_name",
          "type": "string",
          "description": "Display name of the channel the reward is for."
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "ID of the reward."
        },
        {
          "parameter": "title",
          "type": "string",
          "description": "The title of the reward."
        },
        {
          "parameter": "prompt",
          "type": "string",
          "description": "The prompt for the viewer when redeeming the reward."
        },
        {
          "parameter": "cost",
          "type": "integer",
          "description": "The cost of the reward."
        },
        {
          "parameter": "image",
          "type": "object",
          "description": "Set of custom images of 1x, 2x and 4x sizes for the reward { url_1x: string, url_2x: string, url_4x: string }, can be null if no images have been uploaded."
        },
        {
          "parameter": "default_image",
          "type": "object",
          "description": "Set of default images of 1x, 2x and 4x sizes for the reward { url_1x: string, url_2x: string, url_4x: string }"
        },
        {
          "parameter": "background_color",
          "type": "string",
          "description": "Custom background color for the reward. Format: Hex with # prefix. Example: #00E5CB."
        },
        {
          "parameter": "is_enabled",
          "type": "boolean",
          "description": "Is the reward currently enabled, if false the reward won’t show up to viewers."
        },
        {
          "parameter": "is_user_input_required",
          "type": "boolean",
          "description": "Does the user need to enter information when redeeming the reward"
        },
        {
          "parameter": "max_per_stream_setting",
          "type": "object",
          "description": "Whether a maximum per stream is enabled and what the maximum is. { is_enabled: bool, max_per_stream: int }"
        },
        {
          "parameter": "max_per_user_per_stream_setting",
          "type": "object",
          "description": "Whether a maximum per user per stream is enabled and what the maximum is. { is_enabled: bool, max_per_user_per_stream: int }"
        },
        {
          "parameter": "global_cooldown_setting",
          "type": "object",
          "description": "Whether a cooldown is enabled and what the cooldown is. { is_enabled: bool, global_cooldown_seconds: int }"
        },
        {
          "parameter": "is_paused",
          "type": "boolean",
          "description": "Is the reward currently paused, if true viewers can’t redeem."
        },
        {
          "parameter": "is_in_stock",
          "type": "boolean",
          "description": "Is the reward currently in stock, if false viewers can’t redeem."
        },
        {
          "parameter": "should_redemptions_skip_request_queue",
          "type": "boolean",
          "description": "Should redemptions be set to FULFILLED status immediately when redeemed and skip the request queue instead of the normal UNFULFILLED status."
        },
        {
          "parameter": "redemptions_redeemed_current_stream",
          "type": "integer",
          "description": "The number of redemptions redeemed during the current live stream. Counts against the max_per_stream_setting limit. Null if the broadcasters stream isn’t live or max_per_stream_setting isn’t enabled."
        },
        {
          "parameter": "cooldown_expires_at",
          "type": "string",
          "description": "Timestamp of the cooldown expiration. Null if the reward isn’t on cooldown."
        }
      ]
    },
    {
      "title": "Get Custom Reward Redemption",
      "authentication": "channel:read:redemptions",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/channel_points/custom_rewards/redemptions"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "Provided broadcaster_id must match the user_id in the user OAuth token."
        },
        {
          "parameter": "reward_id",
          "type": "string",
          "description": "When ID is not provided, this parameter returns paginated Custom Reward Redemption objects for redemptions of the Custom Reward with ID reward_id."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "id",
          "type": "string",
          "description": "When used, this param filters the results and only returns Custom Reward Redemption objects for the redemptions with matching ID. Maximum: 50"
        },
        {
          "parameter": "status",
          "type": "string",
          "description": "When id is not provided, this param is required and filters the paginated Custom Reward Redemption objects for redemptions with the matching status. Can be one of UNFULFILLED, FULFILLED or CANCELED"
        },
        {
          "parameter": "sort",
          "type": "string",
          "description": "Sort order of redemptions returned when getting the paginated Custom Reward Redemption objects for a reward. One of: OLDEST, NEWEST. Default: OLDEST."
        },
        {
          "parameter": "after",
          "type": "string",
          "description": "Cursor for forward pagination: tells the server where to start fetching the next set of results, in a multi-page response. This applies only to queries without ID. If an ID is specified, it supersedes any cursor/offset combinations. The cursor value specified here is from the pagination response field of a prior query."
        },
        {
          "parameter": "first",
          "type": "integer",
          "description": "Number of results to be returned when getting the paginated Custom Reward Redemption objects for a reward. Limit: 50. Default: 20."
        }
      ],
      "response_fields": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "The id of the broadcaster that the reward belongs to."
        },
        {
          "parameter": "broadcaster_login",
          "type": "string",
          "description": "Broadcaster’s user login name."
        },
        {
          "parameter": "broadcaster_name",
          "type": "string",
          "description": "The display name of the broadcaster that the reward belongs to."
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "The ID of the redemption."
        },
        {
          "parameter": "user_login",
          "type": "string",
          "description": "The login of the user who redeemed the reward."
        },
        {
          "parameter": "user_id",
          "type": "string",
          "description": "The ID of the user that redeemed the reward."
        },
        {
          "parameter": "user_name",
          "type": "string",
          "description": "The display name of the user that redeemed the reward."
        },
        {
          "parameter": "reward",
          "type": "object",
          "description": "Basic information about the Custom Reward that was redeemed at the time it was redeemed. { “id”: string, “title”: string, “prompt”: string, “cost”: int, }"
        },
        {
          "parameter": "user_input",
          "type": "string",
          "description": "The user input provided. Empty string if not provided."
        },
        {
          "parameter": "status",
          "type": "string",
          "description": "One of UNFULFILLED, FULFILLED or CANCELED"
        },
        {
          "parameter": "redeemed_at",
          "type": "string",
          "description": "RFC3339 timestamp of when the reward was redeemed."
        }
      ]
    },
    {
      "title": "Update Custom Reward",
      "authentication": "channel:manage:redemptions",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "PATCH",
        "url": "https://api.twitch.tv/helix/channel_points/custom_rewards"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "Provided broadcaster_id must match the user_id in the user OAuth token."
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "ID of the Custom Reward to update. Must match a Custom Reward on the channel of the broadcaster_id."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "ID of the channel the reward is for."
        },
        {
          "parameter": "broadcaster_login",
          "type": "string",
          "description": "Broadcaster’s user login name."
        },
        {
          "parameter": "broadcaster_name",
          "type": "string",
          "description": "Display name of the channel the reward is for."
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "ID of the reward."
        },
        {
          "parameter": "title",
          "type": "string",
          "description": "The title of the reward."
        },
        {
          "parameter": "prompt",
          "type": "string",
          "description": "The prompt for the viewer when they are redeeming the reward."
        },
        {
          "parameter": "cost",
          "type": "integer",
          "description": "The cost of the reward."
        },
        {
          "parameter": "image",
          "type": "object",
          "description": "Set of custom images of 1x, 2x, and 4x sizes for the reward, can be null if no images have been uploaded."
        },
        {
          "parameter": "default_image",
          "type": "object",
          "description": "Set of default images of 1x, 2x, and 4x sizes for the reward."
        },
        {
          "parameter": "background_color",
          "type": "string",
          "description": "Custom background color for the reward as a hexadecimal value. Example: #00E5CB."
        },
        {
          "parameter": "is_enabled",
          "type": "boolean",
          "description": "Is the reward currently enabled, if false the reward won’t show up to viewers."
        },
        {
          "parameter": "is_user_input_required",
          "type": "boolean",
          "description": "Does the user need to enter information when redeeming the reward."
        },
        {
          "parameter": "max_per_stream_setting",
          "type": "object",
          "description": "Whether a maximum per stream is enabled and what the maximum is."
        },
        {
          "parameter": "max_per_user_per_stream_setting",
          "type": "object",
          "description": "Whether a maximum per user per stream is enabled and what the maximum is."
        },
        {
          "parameter": "global_cooldown_setting",
          "type": "object",
          "description": "Whether a cooldown is enabled and what the cooldown is."
        },
        {
          "parameter": "is_paused",
          "type": "boolean",
          "description": "Is the reward currently paused, if true viewers cannot redeem."
        },
        {
          "parameter": "is_in_stock",
          "type": "boolean",
          "description": "Is the reward currently in stock, if false viewers can’t redeem."
        },
        {
          "parameter": "should_redemptions_skip_request_queue",
          "type": "boolean",
          "description": "Should redemptions be set to FULFILLED status immediately when redeemed and skip the request queue instead of the normal UNFULFILLED status."
        },
        {
          "parameter": "redemptions_redeemed_current_stream",
          "type": "integer",
          "description": "The number of redemptions redeemed during the current live stream. Counts against the max_per_stream_setting limit. null if the broadcasters stream is not live or max_per_stream_setting is not enabled."
        },
        {
          "parameter": "cooldown_expires_at",
          "type": "string",
          "description": "Timestamp of the cooldown expiration. null if the reward is not on cooldown."
        }
      ]
    },
    {
      "title": "Update Redemption Status",
      "authentication": "channel:manage:redemptions",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "PATCH",
        "url": "https://api.twitch.tv/helix/channel_points/custom_rewards/redemptions"
      },
      "required_query_parameters": [
        {
          "parameter": "id",
          "type": "string",
          "description": "ID of the Custom Reward Redemption to update, must match a Custom Reward Redemption on broadcaster_id’s channel. Maximum: 50."
        },
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "Provided broadcaster_id must match the user_id in the user OAuth token."
        },
        {
          "parameter": "reward_id",
          "type": "string",
          "description": "ID of the Custom Reward the redemptions to be updated are for."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "The ID of the broadcaster that the reward belongs to."
        },
        {
          "parameter": "broadcaster_login",
          "type": "string",
          "description": "Broadcaster’s user login name."
        },
        {
          "parameter": "broadcaster_name",
          "type": "string",
          "description": "The display name of the broadcaster that the reward belongs to."
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "The ID of the redemption."
        },
        {
          "parameter": "user_id",
          "type": "string",
          "description": "The ID of the user that redeemed the reward."
        },
        {
          "parameter": "user_name",
          "type": "string",
          "description": "The display name of the user that redeemed the reward."
        },
        {
          "parameter": "user_login",
          "type": "string",
          "description": "The login of the user that redeemed the reward."
        },
        {
          "parameter": "reward",
          "type": "object",
          "description": "Basic information about the Custom Reward that was redeemed at the time it was redeemed. { “id”: string, “title”: string, “prompt”: string, “cost”: int, }"
        },
        {
          "parameter": "user_input",
          "type": "string",
          "description": "The user input provided. Null if not provided."
        },
        {
          "parameter": "status",
          "type": "string",
          "description": "One of UNFULFILLED, FULFILLED or CANCELED."
        },
        {
          "parameter": "redeemed_at",
          "type": "string",
          "description": "RFC3339 timestamp of when the reward was redeemed."
        }
      ]
    },
    {
      "title": "Get Charity Campaign",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/charity/campaigns"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "\n      ",
          "type": "Yes",
          "description": "The ID of the broadcaster that’s actively running a charity campaign."
        }
      ],
      "response_fields": [
        {
          "parameter": "\n      ",
          "type": "Object[]",
          "description": "A list that contains the charity campaign that the broadcaster is currently running. The array is empty if the broadcaster is not running a charity campaign; the campaign information is no longer available as soon as the campaign ends."
        },
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "An ID that uniquely identifies the charity campaign."
        },
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "An ID that uniquely identifies the broadcaster that’s running the campaign."
        },
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "The broadcaster’s login name."
        },
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "The broadcaster’s display name."
        },
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "The charity’s name."
        },
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "A description of the charity."
        },
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "A URL to an image of the charity’s logo. The image’s type is PNG and its size is 100px X 100px."
        },
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "A URL to the charity’s website."
        },
        {
          "parameter": "\n      ",
          "type": "Object",
          "description": "An object that contains the current amount of donations that the campaign has received."
        },
        {
          "parameter": "\n      ",
          "type": "Integer",
          "description": "The monetary amount. The amount is specified in the currency’s minor unit. For example, the minor units for USD is cents, so if the amount is $5.50 USD, value is set to 550."
        },
        {
          "parameter": "\n      ",
          "type": "Integer",
          "description": "The number of decimal places used by the currency. For example, USD uses two decimal places. Use this number to translate value from minor units to major units by using the formula:. . value / 10^decimal_places"
        },
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "The ISO-4217 three-letter currency code that identifies the type of currency in value."
        },
        {
          "parameter": "\n      ",
          "type": "Object",
          "description": "An object that contains the amount of money that the campaign is trying to raise. This field may be null if the broadcaster has not defined a target goal."
        },
        {
          "parameter": "\n      ",
          "type": "Integer",
          "description": "The monetary amount. The amount is specified in the currency’s minor unit. For example, the minor units for USD is cents, so if the amount is $5.50 USD, value is set to 550."
        },
        {
          "parameter": "\n      ",
          "type": "Integer",
          "description": "The number of decimal places used by the currency. For example, USD uses two decimal places. Use this number to translate value from minor units to major units by using the formula:. . value / 10^decimal_places"
        },
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "The ISO-4217 three-letter currency code that identifies the type of currency in value."
        }
      ]
    },
    {
      "title": "Get Channel Emotes",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/chat/emotes"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "An ID that identifies the broadcaster to get the emotes from."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "data",
          "type": "object array",
          "description": "A list of emotes that the specified channel created."
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "An ID that identifies the emote."
        },
        {
          "parameter": "name",
          "type": "string",
          "description": "The name of the emote. This is the name that viewers type in the chat window to get the emote to appear."
        },
        {
          "parameter": "images",
          "type": "object",
          "description": "Contains the image URLs for the emote. These image URLs will always provide a static (i.e., non-animated) emote image with a light background. NOTE: The preference is for you to use the templated URL in the template field to fetch the image instead of using these URLs."
        },
        {
          "parameter": "url_1x",
          "type": "string",
          "description": "A URL to the small version (28px x 28px) of the emote."
        },
        {
          "parameter": "url_2x",
          "type": "string",
          "description": "A URL to the medium version (56px x 56px) of the emote."
        },
        {
          "parameter": "url_4x",
          "type": "string",
          "description": "A URL to the large version (112px x 112px) of the emote."
        },
        {
          "parameter": "tier",
          "type": "string",
          "description": "The subscriber tier at which the emote is unlocked. This field contains the tier information only if emote_type is set to subscriptions, otherwise, it’s an empty string."
        },
        {
          "parameter": "emote_type",
          "type": "string",
          "description": "The type of emote. The possible values are: bitstier &mdash; Indicates a custom Bits tier emote.follower &mdash; Indicates a custom follower emote.subscriptions &mdash; Indicates a custom subscriber emote."
        },
        {
          "parameter": "emote_set_id",
          "type": "string",
          "description": "An ID that identifies the emote set that the emote belongs to."
        },
        {
          "parameter": "format",
          "type": "string array",
          "description": "The formats that the emote is available in. For example, if the emote is available only as a static PNG, the array contains only static. But if it’s available as a static PNG and an animated GIF, the array contains static and animated. The possible formats are: animated &mdash; Indicates an animated GIF is available for this emote.static &mdash; Indicates a static PNG file is available for this emote."
        },
        {
          "parameter": "scale",
          "type": "string array",
          "description": "The sizes that the emote is available in. For example, if the emote is available in small and medium sizes, the array contains 1.0 and 2.0. Possible sizes are: 1.0 &mdash; A small version (28px x 28px) is available.2.0 &mdash; A medium version (56px x 56px) is available.3.0 &mdash; A large version (112px x 112px) is available."
        },
        {
          "parameter": "theme_mode",
          "type": "string array",
          "description": "The background themes that the emote is available in. Possible themes are: darklight"
        },
        {
          "parameter": "template",
          "type": "string",
          "description": "A templated URL. Use the values from id, format, scale, and theme_mode to replace the like-named placeholder strings in the templated URL to create a CDN (content delivery network) URL that you use to fetch the emote. For information about what the template looks like and how to use it to fetch emotes, see Emote CDN URL format."
        }
      ]
    },
    {
      "title": "Get Global Emotes",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/chat/emotes/global"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "data",
          "type": "object array",
          "description": "The list of global emotes."
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "An ID that identifies the emote."
        },
        {
          "parameter": "name",
          "type": "string",
          "description": "The name of the emote. This is the name that viewers type in the chat window to get the emote to appear."
        },
        {
          "parameter": "images",
          "type": "object",
          "description": "Contains the image URLs for the emote. These image URLs will always provide a static (i.e., non-animated) emote image with a light background. NOTE: The preference is for you to use the templated URL in the template field to fetch the image instead of using these URLs."
        },
        {
          "parameter": "url_1x",
          "type": "string",
          "description": "A URL to the small version (28px x 28px) of the emote."
        },
        {
          "parameter": "url_2x",
          "type": "string",
          "description": "A URL to the medium version (56px x 56px) of the emote."
        },
        {
          "parameter": "url_4x",
          "type": "string",
          "description": "A URL to the large version (112px x 112px) of the emote."
        },
        {
          "parameter": "format",
          "type": "string array",
          "description": "The formats that the emote is available in. For example, if the emote is available only as a static PNG, the array contains only static. But if it’s available as a static PNG and an animated GIF, the array contains static and animated. The possible formats are: animated &mdash; Indicates an animated GIF is available for this emote.static &mdash; Indicates a static PNG file is available for this emote."
        },
        {
          "parameter": "scale",
          "type": "string array",
          "description": "The sizes that the emote is available in. For example, if the emote is available in small and medium sizes, the array contains 1.0 and 2.0. Possible sizes are: 1.0 &mdash; A small version (28px x 28px) is available.2.0 &mdash; A medium version (56px x 56px) is available.3.0 &mdash; A large version (112px x 112px) is available."
        },
        {
          "parameter": "theme_mode",
          "type": "string array",
          "description": "The background themes that the emote is available in. Possible themes are: darklight"
        },
        {
          "parameter": "template",
          "type": "string",
          "description": "A templated URL. Use the values from id, format, scale, and theme_mode to replace the like-named placeholder strings in the templated URL to create a CDN (content delivery network) URL that you use to fetch the emote. For information about what the template looks like and how to use it to fetch emotes, see Emote CDN URL format."
        }
      ]
    },
    {
      "title": "Get Emote Sets",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/chat/emotes/set"
      },
      "required_query_parameters": [
        {
          "parameter": "emote_set_id",
          "type": "string",
          "description": "An ID that identifies the emote set. Include the parameter for each emote set you want to get. For example, emote_set_id=1234&amp;emote_set_id=5678. You may specify a maximum of 25 IDs."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "data",
          "type": "object array",
          "description": "The list of emotes found in the specified emote sets."
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "An ID that identifies the emote."
        },
        {
          "parameter": "name",
          "type": "string",
          "description": "The name of the emote. This is the name that viewers type in the chat window to get the emote to appear."
        },
        {
          "parameter": "images",
          "type": "object",
          "description": "Contains the image URLs for the emote. These image URLs will always provide a static (i.e., non-animated) emote image with a light background. NOTE: The preference is for you to use the templated URL in the template field to fetch the image instead of using these URLs."
        },
        {
          "parameter": "url_1x",
          "type": "string",
          "description": "A URL to the small version (28px x 28px) of the emote."
        },
        {
          "parameter": "url_2x",
          "type": "string",
          "description": "A URL to the medium version (56px x 56px) of the emote."
        },
        {
          "parameter": "url_4x",
          "type": "string",
          "description": "A URL to the large version (112px x 112px) of the emote."
        },
        {
          "parameter": "emote_type",
          "type": "string",
          "description": "The type of emote. The possible values are: bitstier &mdash; Indicates a Bits tier emote.follower &mdash; Indicates a follower emote.subscriptions &mdash; Indicates a subscriber emote."
        },
        {
          "parameter": "emote_set_id",
          "type": "string",
          "description": "An ID that identifies the emote set that the emote belongs to."
        },
        {
          "parameter": "owner_id",
          "type": "string",
          "description": "The ID of the broadcaster who owns the emote."
        },
        {
          "parameter": "format",
          "type": "string array",
          "description": "The formats that the emote is available in. For example, if the emote is available only as a static PNG, the array contains only static. But if it’s available as a static PNG and an animated GIF, the array contains static and animated. The possible formats are: animated &mdash; Indicates an animated GIF is available for this emote.static &mdash; Indicates a static PNG file is available for this emote."
        },
        {
          "parameter": "scale",
          "type": "string array",
          "description": "The sizes that the emote is available in. For example, if the emote is available in small and medium sizes, the array contains 1.0 and 2.0. Possible sizes are: 1.0 &mdash; A small version (28px x 28px) is available.2.0 &mdash; A medium version (56px x 56px) is available.3.0 &mdash; A large version (112px x 112px) is available."
        },
        {
          "parameter": "theme_mode",
          "type": "string array",
          "description": "The background themes that the emote is available in. Possible themes are: darklight"
        },
        {
          "parameter": "template",
          "type": "string",
          "description": "A templated URL. Use the values from id, format, scale, and theme_mode to replace the like-named placeholder strings in the templated URL to create a CDN (content delivery network) URL that you use to fetch the emote. For information about what the template looks like and how to use it to fetch emotes, see Emote CDN URL format."
        }
      ]
    },
    {
      "title": "Get Channel Chat Badges",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/chat/badges"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "The ID of the broadcaster whose chat badges you want to get."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "data",
          "type": "Array of objects",
          "description": "An array of chat badge sets."
        },
        {
          "parameter": "set.set_id",
          "type": "string",
          "description": "ID for the chat badge set."
        },
        {
          "parameter": "set.versions",
          "type": "Array of objects",
          "description": "Contains chat badge objects for the set."
        },
        {
          "parameter": "set.version.id",
          "type": "string",
          "description": "ID of the chat badge version."
        },
        {
          "parameter": "set.version.image_url_1x",
          "type": "string",
          "description": "Small image URL."
        },
        {
          "parameter": "set.version.image_url_2x",
          "type": "string",
          "description": "Medium image URL."
        },
        {
          "parameter": "set.version.image_url_4x",
          "type": "string",
          "description": "Large image URL."
        }
      ]
    },
    {
      "title": "Get Global Chat Badges",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/chat/badges/global"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "data",
          "type": "Array of objects",
          "description": "An array of chat badge sets."
        },
        {
          "parameter": "set.set_id",
          "type": "string",
          "description": "ID for the chat badge set."
        },
        {
          "parameter": "set.versions",
          "type": "Array of objects",
          "description": "Contains chat badge objects for the set."
        },
        {
          "parameter": "set.version.id",
          "type": "string",
          "description": "ID of the chat badge version."
        },
        {
          "parameter": "set.version.image_url_1x",
          "type": "string",
          "description": "Small image URL."
        },
        {
          "parameter": "set.version.image_url_2x",
          "type": "string",
          "description": "Medium image URL."
        },
        {
          "parameter": "set.version.image_url_4x",
          "type": "string",
          "description": "Large image URL."
        }
      ]
    },
    {
      "title": "Get Chat Settings",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/chat/settings"
      },
      "required_query_parameters": [
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "The ID of the broadcaster whose chat settings you want to get."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "Required only to access the non_moderator_chat_delay or non_moderator_chat_delay_duration settings.. . The ID of a user that has permission to moderate the broadcaster’s chat room. This ID must match the user ID associated with the user OAuth token.. . If the broadcaster wants to get their own settings (instead of having the moderator do it), set this parameter to the broadcaster’s ID, too."
        }
      ],
      "response_fields": []
    },
    {
      "title": "Update Chat Settings",
      "authentication": "moderator:manage:chat_settings",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "PATCH",
        "url": "https://api.twitch.tv/helix/chat/settings"
      },
      "required_query_parameters": [
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "The ID of the broadcaster whose chat settings you want to update."
        },
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "The ID of a user that has permission to moderate the broadcaster’s chat room. This ID must match the user ID associated with the user OAuth token.. . If the broadcaster is making the update, also set this parameter to the broadcaster’s ID."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": []
    },
    {
      "title": "Send Chat Announcement",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "POST",
        "url": "https://api.twitch.tv/helix/chat/announcements"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": []
    },
    {
      "title": "Get User Chat Color",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/chat/color"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": []
    },
    {
      "title": "Update User Chat Color",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "PUT",
        "url": "https://api.twitch.tv/helix/chat/color"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": []
    },
    {
      "title": "Create Clip",
      "authentication": "clips:edit",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "POST",
        "url": "https://api.twitch.tv/helix/clips"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "ID of the stream from which the clip will be made."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "edit_url",
          "type": "string",
          "description": "URL of the edit page for the clip."
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "ID of the clip that was created."
        }
      ]
    },
    {
      "title": "Get Clips",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/clips"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "ID of the broadcaster for whom clips are returned. The number of clips returned is determined by the first query-string parameter (default: 20). Results are ordered by view count."
        },
        {
          "parameter": "game_id",
          "type": "string",
          "description": "ID of the game for which clips are returned. The number of clips returned is determined by the first query-string parameter (default: 20). Results are ordered by view count."
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "ID of the clip being queried. Limit: 100."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "after",
          "type": "string",
          "description": "Cursor for forward pagination: tells the server where to start fetching the next set of results, in a multi-page response. This applies only to queries specifying broadcaster_id or game_id. The cursor value specified here is from the pagination response field of a prior query."
        },
        {
          "parameter": "before",
          "type": "string",
          "description": "Cursor for backward pagination: tells the server where to start fetching the next set of results, in a multi-page response. This applies only to queries specifying broadcaster_id or game_id. The cursor value specified here is from the pagination response field of a prior query."
        },
        {
          "parameter": "ended_at",
          "type": "string",
          "description": "Ending date/time for returned clips, in RFC3339 format. (Note that the seconds value is ignored.) If this is specified, started_at also must be specified; otherwise, the time period is ignored."
        },
        {
          "parameter": "first",
          "type": "integer",
          "description": "Maximum number of objects to return. Maximum: 100. Default: 20."
        },
        {
          "parameter": "started_at",
          "type": "string",
          "description": "Starting date/time for returned clips, in RFC3339 format. (The seconds value is ignored.) If this is specified, ended_at also should be specified; otherwise, the ended_at date/time will be 1 week after the started_at value."
        }
      ],
      "response_fields": [
        {
          "parameter": "id",
          "type": "string",
          "description": "ID of the clip being queried."
        },
        {
          "parameter": "url",
          "type": "string",
          "description": "URL where the clip can be viewed."
        },
        {
          "parameter": "embed_url",
          "type": "string",
          "description": "URL to embed the clip."
        },
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "User ID of the stream from which the clip was created."
        },
        {
          "parameter": "broadcaster_name",
          "type": "string",
          "description": "Display name corresponding to broadcaster_id."
        },
        {
          "parameter": "creator_id",
          "type": "string",
          "description": "ID of the user who created the clip."
        },
        {
          "parameter": "creator_name",
          "type": "string",
          "description": "Display name corresponding to creator_id."
        },
        {
          "parameter": "video_id",
          "type": "string",
          "description": "ID of the video from which the clip was created. This field contains an empty string if the video is not available."
        },
        {
          "parameter": "game_id",
          "type": "string",
          "description": "ID of the game assigned to the stream when the clip was created."
        },
        {
          "parameter": "language",
          "type": "string",
          "description": "Language of the stream from which the clip was created. A language value is either the ISO 639-1 two-letter code for a supported stream language or “other”."
        },
        {
          "parameter": "title",
          "type": "string",
          "description": "Title of the clip."
        },
        {
          "parameter": "view_count",
          "type": "int",
          "description": "Number of times the clip has been viewed."
        },
        {
          "parameter": "created_at",
          "type": "string",
          "description": "Date when the clip was created."
        },
        {
          "parameter": "thumbnail_url",
          "type": "string",
          "description": "URL of the clip thumbnail."
        },
        {
          "parameter": "duration",
          "type": "float",
          "description": "Duration of the Clip in seconds (up to 0.1 precision)."
        },
        {
          "parameter": "vod_offset",
          "type": "int",
          "description": "The zero-based offset, in seconds, to where the clip starts in the video (VOD). Is null if the video is not available or hasn’t been created yet from the live stream. See video_id.. . Note that there’s a delay between when a clip is created during a broadcast and when the offset is set. During the delay period, vod_offset is null. The delay is indeterminant but is typically minutes long."
        },
        {
          "parameter": "pagination",
          "type": "object containing a string",
          "description": "A cursor value, to be used in a subsequent request to specify the starting point of the next set of results."
        }
      ]
    },
    {
      "title": "Get Code Status",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/entitlements/codes"
      },
      "required_query_parameters": [
        {
          "parameter": "code",
          "type": "String",
          "description": "The code to get the status of. Repeat this query parameter additional times to get the status of multiple codes.. Ex: ?code=code1&amp;code=code2. 1-20 code parameters are allowed."
        },
        {
          "parameter": "user_id",
          "type": "Integer",
          "description": "Represents a numeric Twitch user ID.. The user account which is going to receive the entitlement associated with the code."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "data",
          "type": "Array of payloads each of which includes code (string) and status (string).",
          "description": "Indicates the current status of each key when checking key status. . . Indicates the success or error state of each key when redeeming."
        }
      ]
    },
    {
      "title": "Get Drops Entitlements",
      "authentication": "",
      "pagination_support": {
        "forward": true,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/entitlements/drops"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "id",
          "type": "string",
          "description": "Unique identifier of the entitlement."
        },
        {
          "parameter": "user_id",
          "type": "string",
          "description": "A Twitch user ID."
        },
        {
          "parameter": "game_id",
          "type": "string",
          "description": "A Twitch game ID."
        },
        {
          "parameter": "fulfillment_status",
          "type": "string",
          "description": "An optional fulfillment status used to filter entitlements. Valid values are \"CLAIMED\" or \"FULFILLED\"."
        },
        {
          "parameter": "after",
          "type": "string",
          "description": "The cursor used to fetch the next page of data."
        },
        {
          "parameter": "first",
          "type": "integer",
          "description": "Maximum number of entitlements to return.. . Default: 20. Max: 1000"
        }
      ],
      "response_fields": [
        {
          "parameter": "data",
          "type": "array",
          "description": "Array of entitlements."
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "Unique identifier of the entitlement."
        },
        {
          "parameter": "benefit_id",
          "type": "string",
          "description": "Identifier of the benefit."
        },
        {
          "parameter": "timestamp",
          "type": "string",
          "description": "UTC timestamp in ISO format when this entitlement was granted on Twitch."
        },
        {
          "parameter": "user_id",
          "type": "string",
          "description": "Twitch user ID of the user who was granted the entitlement."
        },
        {
          "parameter": "game_id",
          "type": "string",
          "description": "Twitch game ID of the game that was being played when this benefit was entitled."
        },
        {
          "parameter": "fulfillment_status",
          "type": "string",
          "description": "The fulfillment status of the entitlement as determined by the game developer. Valid values are \"CLAIMED\" or \"FULFILLED\"."
        },
        {
          "parameter": "updated_at",
          "type": "string",
          "description": "UTC timestamp in ISO format for when this entitlement was last updated."
        },
        {
          "parameter": "pagination",
          "type": "object",
          "description": "A cursor value, to be used in a subsequent request to specify the starting point of the next set of results."
        }
      ]
    },
    {
      "title": "Update Drops Entitlements",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "PATCH",
        "url": "https://api.twitch.tv/helix/entitlements/drops"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "data",
          "type": "array",
          "description": "Array of entitlement update statuses."
        },
        {
          "parameter": "status",
          "type": "string",
          "description": "Status code applied to a set of entitlements for the update operation that can be used to indicate partial success. Valid values are:. . SUCCESS: Entitlement was successfully updated.. . INVALID_ID: Invalid format for entitlement ID.. . NOT_FOUND: Entitlement ID does not exist.. . UNAUTHORIZED: Entitlement is not owned by the organization or the user when called with a user OAuth token.. . UPDATE_FAILED: Indicates the entitlement update operation failed. Errors in the this state are expected to be be transient and should be retried later."
        },
        {
          "parameter": "ids",
          "type": "array",
          "description": "Array of unique identifiers of the entitlements for the specified status."
        }
      ]
    },
    {
      "title": "Redeem Code",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "POST",
        "url": "https://api.twitch.tv/helix/entitlements/codes"
      },
      "required_query_parameters": [
        {
          "parameter": "code",
          "type": "String",
          "description": "The redemption code to redeem. To redeem multiple codes, include this parameter for each redemption code. For example, code=1234&amp;code=5678. You may specify a maximum of 20 codes."
        },
        {
          "parameter": "user_id",
          "type": "String",
          "description": "The ID of the user that owns the redemption code to redeem."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "data",
          "type": "Object array",
          "description": "The list of redeemed codes."
        },
        {
          "parameter": "code",
          "type": "String",
          "description": "The redemption code."
        },
        {
          "parameter": "status",
          "type": "String",
          "description": "The redemption code’s status. Possible values are:ALREADY_CLAIMED &mdash; The code has already been claimed. All codes are single-use.EXPIRED &mdash; The code has expired and can no longer be claimed.INACTIVE &mdash; The code has not been activated.INCORRECT_FORMAT &mdash; The code is not properly formatted.INTERNAL_ERROR &mdash; An internal or unknown error occurred when accessing the code.NOT_FOUND &mdash; The code was not found.SUCCESSFULLY_REDEEMED &mdash; Successfully redeemed the code and credited the user's account with the entitlement.UNUSED &mdash; The code has not been claimed.USER_NOT_ELIGIBLE &mdash; The user is not eligible to redeem this code."
        }
      ]
    },
    {
      "title": "Get Extension Configuration Segment",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/extensions/configurations"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "The ID of the broadcaster for the configuration returned. This parameter is required if you set the segment parameter to broadcaster or developer. Do not specify this parameter if you set segment to global."
        },
        {
          "parameter": "extension_id",
          "type": "string",
          "description": "The ID of the extension that contains the configuration segment you want to get."
        },
        {
          "parameter": "segment",
          "type": "string",
          "description": "The type of configuration segment to get. Valid values are: broadcasterdeveloperglobalYou may specify one or more segments. To specify multiple segments, include the segment parameter for each segment to get. For example, segment=broadcaster&amp;segment=developer."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "data",
          "type": "object array",
          "description": "An array of Segment objects."
        },
        {
          "parameter": "segment",
          "type": "string",
          "description": "The type of segment. Possible values are: broadcasterdeveloperglobal"
        },
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "The ID of the broadcaster that owns the extension. The object includes this field only if the segment query parameter is set to developer or broadcaster."
        },
        {
          "parameter": "content",
          "type": "string",
          "description": "The contents of the segment. This string may be a plain string or a string-encoded JSON object."
        },
        {
          "parameter": "version",
          "type": "string",
          "description": "The version that identifies the segment’s definition."
        }
      ]
    },
    {
      "title": "Set Extension Configuration Segment",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "PUT",
        "url": "https://api.twitch.tv/helix/extensions/configurations"
      },
      "required_query_parameters": [],
      "required_body_parameters": [
        {
          "parameter": "extension_id",
          "type": "string",
          "description": "ID for the Extension which the configuration is for."
        },
        {
          "parameter": "segment",
          "type": "string",
          "description": "Configuration type. Valid values are \"global\", \"developer\", or \"broadcaster\"."
        }
      ],
      "optional_query_parameters": [],
      "response_fields": []
    },
    {
      "title": "Set Extension Required Configuration",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "PUT",
        "url": "https://api.twitch.tv/helix/extensions/required_configuration"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "User ID of the broadcaster who has activated the specified Extension on their channel."
        }
      ],
      "required_body_parameters": [
        {
          "parameter": "extension_id",
          "type": "string",
          "description": "ID for the Extension to activate."
        },
        {
          "parameter": "extension_version",
          "type": "string",
          "description": "The version fo the Extension to release."
        },
        {
          "parameter": "required_configuration",
          "type": "string",
          "description": "The version of the configuration to use with the Extension."
        }
      ],
      "optional_query_parameters": [],
      "response_fields": []
    },
    {
      "title": "Send Extension PubSub Message",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "POST",
        "url": "https://api.twitch.tv/helix/extensions/pubsub"
      },
      "required_query_parameters": [],
      "required_body_parameters": [
        {
          "parameter": "target",
          "type": "array",
          "description": "Array of strings for valid PubSub targets. Valid values: \"broadcast\", \"global\", \"whisper-&lt;user-id&gt;\""
        },
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "ID of the broadcaster receiving the payload. This is not required if is_global_broadcast is set to true."
        },
        {
          "parameter": "is_global_broadcast",
          "type": "boolean",
          "description": "Indicates if the message should be sent to all channels where your Extension is active.. . Default: false."
        },
        {
          "parameter": "message",
          "type": "string",
          "description": "String-encoded JSON message to be sent. The message is limited to a maximum of 5 KB."
        }
      ],
      "optional_query_parameters": [],
      "response_fields": []
    },
    {
      "title": "Get Extension Live Channels",
      "authentication": "",
      "pagination_support": {
        "forward": true,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/extensions/live"
      },
      "required_query_parameters": [
        {
          "parameter": "extension_id",
          "type": "string",
          "description": "ID of the Extension to search for."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "first",
          "type": "integer",
          "description": "Maximum number of objects to return.. . Maximum: 100. Default: 20."
        },
        {
          "parameter": "after",
          "type": "string",
          "description": "The cursor used to fetch the next page of data."
        }
      ],
      "response_fields": [
        {
          "parameter": "title",
          "type": "string",
          "description": "Title of the stream."
        },
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "User ID of the broadcaster."
        },
        {
          "parameter": "broadcaster_name",
          "type": "string",
          "description": "Broadcaster’s display name."
        },
        {
          "parameter": "game_name",
          "type": "string",
          "description": "Name of the game being played."
        },
        {
          "parameter": "game_id",
          "type": "string",
          "description": "ID of the game being played."
        }
      ]
    },
    {
      "title": "Get Extension Secrets",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/extensions/jwt/secrets"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "format_version",
          "type": "integer",
          "description": "Indicates the version associated with the Extension secrets in the response."
        },
        {
          "parameter": "secrets",
          "type": "array",
          "description": "Array of secret objects."
        },
        {
          "parameter": "secrets[].content",
          "type": "string",
          "description": "Raw secret that should be used with JWT encoding."
        },
        {
          "parameter": "secrets[].active",
          "type": "string",
          "description": "The earliest possible time this secret is valid to sign a JWT in RFC 3339 format."
        },
        {
          "parameter": "secrets[].expires",
          "type": "string",
          "description": "The latest possible time this secret may be used to decode a JWT in RFC 3339 format."
        }
      ]
    },
    {
      "title": "Create Extension Secret",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "POST",
        "url": "https://api.twitch.tv/helix/extensions/jwt/secrets"
      },
      "required_query_parameters": [
        {
          "parameter": "extension_id",
          "type": "string",
          "description": "The ID of the extension to apply the shared secret to."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "delay",
          "type": "integer",
          "description": "JWT signing activation delay for the newly created secret in seconds.. . Minimum: 300. Default: 300."
        }
      ],
      "response_fields": [
        {
          "parameter": "format_version",
          "type": "integer",
          "description": "Indicates the version associated with the Extension secrets in the response."
        },
        {
          "parameter": "secrets",
          "type": "array",
          "description": "Array of secret objects."
        },
        {
          "parameter": "secrets[].content",
          "type": "string",
          "description": "Raw secret that should be used with JWT encoding."
        },
        {
          "parameter": "secrets[].active",
          "type": "string",
          "description": "The earliest possible time this secret is valid to sign a JWT in RFC 3339 format."
        },
        {
          "parameter": "secrets[].expires",
          "type": "string",
          "description": "The latest possible time this secret may be used to decode a JWT in RFC 3339 format."
        }
      ]
    },
    {
      "title": "Send Extension Chat Message",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "POST",
        "url": "https://api.twitch.tv/helix/extensions/chat"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "User ID of the broadcaster whose channel has the Extension activated."
        }
      ],
      "required_body_parameters": [
        {
          "parameter": "text",
          "type": "string",
          "description": "Message for Twitch chat.. . Maximum: 280 characters."
        },
        {
          "parameter": "extension_id",
          "type": "string",
          "description": "Client ID associated with the Extension."
        },
        {
          "parameter": "extension_version",
          "type": "string",
          "description": "Version of the Extension sending this message."
        }
      ],
      "optional_query_parameters": [],
      "response_fields": []
    },
    {
      "title": "Get Extensions",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/extensions"
      },
      "required_query_parameters": [
        {
          "parameter": "extension_id",
          "type": "string",
          "description": "ID of the Extension."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "extension_version",
          "type": "string",
          "description": "The specific version of the Extension to return. If not provided, the current version is returned."
        }
      ],
      "response_fields": [
        {
          "parameter": "author_name",
          "type": "string",
          "description": "Name of the individual or organization that owns the Extension."
        },
        {
          "parameter": "bits_enabled",
          "type": "boolean",
          "description": "Whether the Extension has features that use Bits."
        },
        {
          "parameter": "can_install",
          "type": "boolean",
          "description": "Indicates if a user can install the Extension on their channel. They may not be allowed if the Extension is currently in testing mode and the user is not on the allow list."
        },
        {
          "parameter": "configuration_location",
          "type": "string",
          "description": "Whether the Extension configuration is hosted by the EBS or the Extensions Configuration Service."
        },
        {
          "parameter": "description",
          "type": "string",
          "description": "The description of the Extension."
        },
        {
          "parameter": "eula_tos_url",
          "type": "string",
          "description": "URL to the Extension’s Terms of Service."
        },
        {
          "parameter": "has_chat_support",
          "type": "boolean",
          "description": "Indicates if the Extension can communicate with the installed channel’s chat."
        },
        {
          "parameter": "icon_url",
          "type": "string",
          "description": "The default icon to be displayed in the Extensions directory."
        },
        {
          "parameter": "icon_urls",
          "type": "object",
          "description": "The default icon in a variety of sizes."
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "The autogenerated ID of the Extension."
        },
        {
          "parameter": "name",
          "type": "string",
          "description": "The name of the Extension."
        },
        {
          "parameter": "privacy_policy_url",
          "type": "string",
          "description": "URL to the Extension’s privacy policy."
        },
        {
          "parameter": "request_identity_link",
          "type": "boolean",
          "description": "Indicates if the Extension wants to explicitly ask viewers to link their Twitch identity."
        },
        {
          "parameter": "screenshot_urls",
          "type": "array",
          "description": "Screenshots to be shown in the Extensions marketplace."
        },
        {
          "parameter": "state",
          "type": "string",
          "description": "The current state of the Extension. Valid values are \"InTest\", \"InReview\", \"Rejected\", \"Approved\", \"Released\", \"Deprecated\", \"PendingAction\", \"AssetsUploaded\", \"Deleted\"."
        },
        {
          "parameter": "subscriptions_support_level",
          "type": "string",
          "description": "Indicates if the Extension can determine a user’s subscription level on the channel the Extension is installed on."
        },
        {
          "parameter": "summary",
          "type": "string",
          "description": "A brief description of the Extension."
        },
        {
          "parameter": "support_email",
          "type": "string",
          "description": "The email users can use to receive Extension support."
        },
        {
          "parameter": "version",
          "type": "string",
          "description": "The version of the Extension."
        },
        {
          "parameter": "viewer_summary",
          "type": "string",
          "description": "A brief description displayed on the channel to explain how the Extension works."
        },
        {
          "parameter": "views",
          "type": "object",
          "description": "All configurations related to views such as: mobile, panel, video_overlay, and component."
        },
        {
          "parameter": "allowlisted_config_urls",
          "type": "array",
          "description": "Allow-listed configuration URLs for displaying the Extension."
        },
        {
          "parameter": "allowlisted_panel_urls",
          "type": "array",
          "description": "Allow-listed panel URLs for displaying the Extension."
        }
      ]
    },
    {
      "title": "Get Released Extensions",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/extensions/released"
      },
      "required_query_parameters": [
        {
          "parameter": "extension_id",
          "type": "string",
          "description": "ID of the Extension."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "extension_version",
          "type": "string",
          "description": "The specific version of the Extension to return. If not provided, the current version is returned."
        }
      ],
      "response_fields": [
        {
          "parameter": "author_name",
          "type": "string",
          "description": "Name of the individual or organization that owns the Extension."
        },
        {
          "parameter": "bits_enabled",
          "type": "boolean",
          "description": "Whether the Extension has features that use Bits."
        },
        {
          "parameter": "can_install",
          "type": "boolean",
          "description": "Indicates if a user can install the Extension on their channel. They may not be allowed if the Extension is currently in testing mode and the user is not on the allow list."
        },
        {
          "parameter": "configuration_location",
          "type": "string",
          "description": "Whether the Extension configuration is hosted by the EBS or the Extensions Configuration Service."
        },
        {
          "parameter": "description",
          "type": "string",
          "description": "The description of the Extension."
        },
        {
          "parameter": "eula_tos_url",
          "type": "string",
          "description": "URL to the Extension’s Terms of Service."
        },
        {
          "parameter": "has_chat_support",
          "type": "boolean",
          "description": "Indicates if the Extension can communicate with the installed channel’s chat."
        },
        {
          "parameter": "icon_url",
          "type": "string",
          "description": "The default icon to be displayed in the Extensions directory."
        },
        {
          "parameter": "icon_urls",
          "type": "object",
          "description": "The default icon in a variety of sizes."
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "The autogenerated ID of the Extension."
        },
        {
          "parameter": "name",
          "type": "string",
          "description": "The name of the Extension."
        },
        {
          "parameter": "privacy_policy_url",
          "type": "string",
          "description": "URL to the Extension’s privacy policy."
        },
        {
          "parameter": "request_identity_link",
          "type": "boolean",
          "description": "Indicates if the Extension wants to explicitly ask viewers to link their Twitch identity."
        },
        {
          "parameter": "screenshot_urls",
          "type": "array",
          "description": "Screenshots to be shown in the Extensions marketplace."
        },
        {
          "parameter": "state",
          "type": "string",
          "description": "The current state of the Extension. Valid values are \"InTest\", \"InReview\", \"Rejected\", \"Approved\", \"Released\", \"Deprecated\", \"PendingAction\", \"AssetsUploaded\", \"Deleted\"."
        },
        {
          "parameter": "subscriptions_support_level",
          "type": "object",
          "description": "Indicates if the Extension can determine a user’s subscription level on the channel the Extension is installed on."
        },
        {
          "parameter": "summary",
          "type": "string",
          "description": "A brief description of the Extension."
        },
        {
          "parameter": "support_email",
          "type": "string",
          "description": "The email users can use to receive Extension support."
        },
        {
          "parameter": "version",
          "type": "string",
          "description": "The version of the Extension."
        },
        {
          "parameter": "viewer_summary",
          "type": "string",
          "description": "A brief description displayed on the channel to explain how the Extension works."
        },
        {
          "parameter": "views",
          "type": "object",
          "description": "All configurations related to views such as: mobile, panel, video_overlay, and component."
        },
        {
          "parameter": "allowlisted_config_urls",
          "type": "array",
          "description": "Allow-listed configuration URLs for displaying the Extension."
        },
        {
          "parameter": "allowlisted_panel_urls",
          "type": "array",
          "description": "Allow-listed panel URLs for displaying the Extension."
        }
      ]
    },
    {
      "title": "Get Extension Bits Products",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/bits/extensions"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "should_include_all",
          "type": "boolean",
          "description": "Whether Bits products that are disabled/expired should be included in the response.. . Default: false."
        }
      ],
      "response_fields": [
        {
          "parameter": "sku",
          "type": "string",
          "description": "SKU of the Bits product. This is unique across all products that belong to an Extension."
        },
        {
          "parameter": "cost",
          "type": "object",
          "description": "Object containing cost information."
        },
        {
          "parameter": "cost.amount",
          "type": "integer",
          "description": "Number of Bits for which the product will be exchanged."
        },
        {
          "parameter": "cost.type",
          "type": "string",
          "description": "Cost type. The one valid value is \"bits\"."
        },
        {
          "parameter": "in_development",
          "type": "boolean",
          "description": "Indicates if the product is in development and not yet released for public use."
        },
        {
          "parameter": "display_name",
          "type": "string",
          "description": "Name of the product to be displayed in the Extension."
        },
        {
          "parameter": "expiration",
          "type": "string",
          "description": "Expiration time for the product in RFC3339 format."
        },
        {
          "parameter": "is_broadcast",
          "type": "boolean",
          "description": "Indicates if Bits product purchase events are broadcast to all instances of an Extension on a channel via the “onTransactionComplete” helper callback."
        }
      ]
    },
    {
      "title": "Update Extension Bits Product",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "PUT",
        "url": "https://api.twitch.tv/helix/bits/extensions"
      },
      "required_query_parameters": [],
      "required_body_parameters": [
        {
          "parameter": "sku",
          "type": "string",
          "description": "SKU of the Bits product. This must be unique across all products that belong to an Extension. The SKU cannot be changed after saving.. . Maximum: 255 characters, no white spaces."
        },
        {
          "parameter": "cost",
          "type": "object",
          "description": "Object containing cost information."
        },
        {
          "parameter": "cost.amount",
          "type": "integer",
          "description": "Number of Bits for which the product will be exchanged.. . Minimum: 1, Maximum: 10000."
        },
        {
          "parameter": "cost.type",
          "type": "string",
          "description": "Cost type. The one valid value is \"bits\"."
        },
        {
          "parameter": "display_name",
          "type": "string",
          "description": "Name of the product to be displayed in the Extension.. . Maximum: 255 characters."
        }
      ],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "sku",
          "type": "string",
          "description": "SKU of the Bits product. This is unique across all products that belong to an Extension."
        },
        {
          "parameter": "cost",
          "type": "object",
          "description": "Object containing cost information."
        },
        {
          "parameter": "cost.amount",
          "type": "integer",
          "description": "Number of Bits for which the product will be exchanged."
        },
        {
          "parameter": "cost.type",
          "type": "string",
          "description": "Cost type. The one valid value is \"bits\"."
        },
        {
          "parameter": "in_development",
          "type": "boolean",
          "description": "Indicates if the product is in development and not yet released for public use."
        },
        {
          "parameter": "display_name",
          "type": "string",
          "description": "Name of the product to be displayed in the Extension."
        },
        {
          "parameter": "expiration",
          "type": "string",
          "description": "Expiration time for the product in RFC3339 format."
        },
        {
          "parameter": "is_broadcast",
          "type": "boolean",
          "description": "Indicates if Bits product purchase events are broadcast to all instances of an Extension on a channel via the “onTransactionComplete” helper callback."
        }
      ]
    },
    {
      "title": "Create EventSub Subscription",
      "authentication": "channel.subscribe",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "POST",
        "url": "https://api.twitch.tv/helix/eventsub/subscriptions"
      },
      "required_query_parameters": [],
      "required_body_parameters": [
        {
          "parameter": "type",
          "type": "string",
          "description": "The type of subscription to create. For a list of subscriptions you can create, see Subscription Types. Set type to the value in the Name column of the Subscription Types table."
        },
        {
          "parameter": "version",
          "type": "string",
          "description": "The version of the subscription type used in this request. A subscription type could define one or more object definitions, so you need to specify which definition you’re using."
        },
        {
          "parameter": "condition",
          "type": "condition",
          "description": "The parameter values that are specific to the specified subscription type."
        },
        {
          "parameter": "transport",
          "type": "transport",
          "description": "The transport details, such as the transport method and callback URL, that you want Twitch to use when sending you notifications."
        }
      ],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "data",
          "type": "object array",
          "description": "An array of subscription objects. The array will contain only one element."
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "An ID that identifies the subscription."
        },
        {
          "parameter": "status",
          "type": "string",
          "description": "The status of the create subscription request. Possible values are: enabled &mdash; The subscription is enabled.webhook_callback_verification_pending &mdash; The subscription is pending verification of the specified callback URL. To determine if the subscription moved from pending to another state, send a GET request and use the ID to find the subscription in the list.webhook_callback_verification_failed &mdash; The specified callback URL failed verification.notification_failures_exceeded &mdash; The notification delivery failure rate was too high.authorization_revoked &mdash; The authorization was revoked for one or more users specified in the Condition object.user_removed &mdash; One of the users specified in the Condition object was removed."
        },
        {
          "parameter": "type",
          "type": "string",
          "description": "The type of subscription."
        },
        {
          "parameter": "version",
          "type": "string",
          "description": "The version of the subscription type."
        },
        {
          "parameter": "condition",
          "type": "condition",
          "description": "The parameter values for the subscription type."
        },
        {
          "parameter": "created_at",
          "type": "string",
          "description": "The RFC 3339 timestamp indicating when the subscription was created."
        },
        {
          "parameter": "transport",
          "type": "transport",
          "description": "The transport details used to send you notifications."
        },
        {
          "parameter": "cost",
          "type": "integer",
          "description": "The amount that the subscription counts against your limit. Learn More"
        },
        {
          "parameter": "total",
          "type": "integer",
          "description": "The total number of subscriptions you’ve created."
        },
        {
          "parameter": "total_cost",
          "type": "integer",
          "description": "The sum of all of your subscription costs. Learn More"
        },
        {
          "parameter": "max_total_cost",
          "type": "integer",
          "description": "The maximum total cost that you may incur for all subscriptions you create."
        }
      ]
    },
    {
      "title": "Delete EventSub Subscription",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "DELETE",
        "url": "https://api.twitch.tv/helix/eventsub/subscriptions"
      },
      "required_query_parameters": [
        {
          "parameter": "id",
          "type": "string",
          "description": "The ID of the subscription to delete. This is the ID that Create Eventsub Subscription returns."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": []
    },
    {
      "title": "Get EventSub Subscriptions",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/eventsub/subscriptions"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "status",
          "type": "string",
          "description": "Filter subscriptions by its status. Possible values are: enabled &mdash; The subscription is enabled.webhook_callback_verification_pending &mdash; The subscription is pending verification of the specified callback URL.webhook_callback_verification_failed &mdash; The specified callback URL failed verification.notification_failures_exceeded &mdash; The notification delivery failure rate was too high.authorization_revoked &mdash; The authorization was revoked for one or more users specified in the Condition object.user_removed &mdash; One of the users specified in the Condition object was removed."
        },
        {
          "parameter": "type",
          "type": "string",
          "description": "Filter subscriptions by subscription type (e.g., channel.update). For a list of subscription types, see Subscription Types."
        },
        {
          "parameter": "user_id",
          "type": "string",
          "description": "Filter subscriptions by user ID. The response contains subscriptions where the user ID matches a user ID that you specified in the Condition object when you created the subscription."
        },
        {
          "parameter": "after",
          "type": "string",
          "description": "The cursor used to get the next page of results. The pagination object in the response contains the cursor’s value."
        }
      ],
      "response_fields": [
        {
          "parameter": "data",
          "type": "object array",
          "description": "An array of subscription objects. The list is empty if you don’t have any subscriptions."
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "An ID that identifies the subscription."
        },
        {
          "parameter": "status",
          "type": "string",
          "description": "The subscription’s status. Possible values are: enabled &mdash; The subscription is enabled.webhook_callback_verification_pending &mdash; The subscription is pending verification of the specified callback URL.webhook_callback_verification_failed &mdash; The specified callback URL failed verification.notification_failures_exceeded &mdash; The notification delivery failure rate was too high.authorization_revoked &mdash; The authorization was revoked for one or more users specified in the Condition object.user_removed &mdash; One of the users specified in the Condition object was removed."
        },
        {
          "parameter": "type",
          "type": "string",
          "description": "The subscription’s type."
        },
        {
          "parameter": "version",
          "type": "string",
          "description": "The version of the subscription type."
        },
        {
          "parameter": "condition",
          "type": "condition",
          "description": "The subscription’s parameter values."
        },
        {
          "parameter": "created_at",
          "type": "string",
          "description": "The RFC 3339 timestamp indicating when the subscription was created."
        },
        {
          "parameter": "transport",
          "type": "transport",
          "description": "The transport details used to send you notifications."
        },
        {
          "parameter": "cost",
          "type": "integer",
          "description": "The amount that the subscription counts against your limit. Learn More"
        },
        {
          "parameter": "total",
          "type": "integer",
          "description": "The total number of subscriptions you’ve created."
        },
        {
          "parameter": "total_cost",
          "type": "integer",
          "description": "The sum of all of your subscription costs. Learn More"
        },
        {
          "parameter": "max_total_cost",
          "type": "integer",
          "description": "The maximum total cost that you’re allowed to incur for all subscriptions you create."
        },
        {
          "parameter": "pagination",
          "type": "object",
          "description": "An object that contains the cursor used to get the next page of subscriptions. The object is empty if the list of subscriptions fits on one page or there are no more pages to get. The number of subscriptions returned per page is undertermined."
        },
        {
          "parameter": "cursor",
          "type": "string",
          "description": "The cursor value that you set the after query parameter to."
        }
      ]
    },
    {
      "title": "Get Top Games",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/games/top"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "after",
          "type": "string",
          "description": "Cursor for forward pagination: tells the server where to start fetching the next set of results, in a multi-page response. The cursor value specified here is from the pagination response field of a prior query."
        },
        {
          "parameter": "before",
          "type": "string",
          "description": "Cursor for backward pagination: tells the server where to start fetching the next set of results, in a multi-page response. The cursor value specified here is from the pagination response field of a prior query."
        },
        {
          "parameter": "first",
          "type": "integer",
          "description": "Maximum number of objects to return. Maximum: 100. Default: 20."
        }
      ],
      "response_fields": [
        {
          "parameter": "box_art_url",
          "type": "object",
          "description": "Template URL for a game’s box art."
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "Game ID."
        },
        {
          "parameter": "name",
          "type": "string",
          "description": "Game name."
        },
        {
          "parameter": "pagination",
          "type": "object containing a string",
          "description": "A cursor value, to be used in a subsequent request to specify the starting point of the next set of results."
        }
      ]
    },
    {
      "title": "Get Games",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/games"
      },
      "required_query_parameters": [
        {
          "parameter": "id",
          "type": "string",
          "description": "Game ID. At most 100 id values can be specified."
        },
        {
          "parameter": "name",
          "type": "string",
          "description": "Game name. The name must be an exact match. For example, “Pokemon” will not return a list of Pokemon games; instead, query any specific Pokemon games in which you are interested. At most 100 name values can be specified."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "box_art_url",
          "type": "object",
          "description": "Template URL for the game’s box art."
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "Game ID."
        },
        {
          "parameter": "name",
          "type": "string",
          "description": "Game name."
        }
      ]
    },
    {
      "title": "Get Creator Goals",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/goals"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "The ID of the broadcaster that created the goals."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "data",
          "type": "object array",
          "description": "An array of creator goals. The array will contain at most one goal. The array is empty if the broadcaster hasn’t created goals.. . NOTE: Although the API currently supports only one goal, you should write your application to support one or more goals."
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "An ID that uniquely identifies this goal."
        },
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "An ID that uniquely identifies the broadcaster."
        },
        {
          "parameter": "broadcaster_name",
          "type": "string",
          "description": "The broadcaster’s display name."
        },
        {
          "parameter": "broadcaster_login",
          "type": "string",
          "description": "The broadcaster’s user handle."
        },
        {
          "parameter": "type",
          "type": "string",
          "description": "The type of goal. Possible values are: follower &mdash; The goal is to increase followers.subscription &mdash; The goal is to increase subscriptions. This type shows the net increase or decrease in tier points associated with the subscriptions.subscription_count &mdash; The goal is to increase subscriptions. This type shows the net increase or decrease in the number of subscriptions.new_subscription &mdash; The goal is to increase subscriptions. This type shows only the net increase in tier points associated with the subscriptions (it does not account for users that unsubscribed since the goal started).new_subscription_count &mdash; The goal is to increase subscriptions. This type shows only the net increase in the number of subscriptions (it does not account for users that unsubscribed since the goal started)."
        },
        {
          "parameter": "description",
          "type": "string",
          "description": "A description of the goal, if specified. The description may contain a maximum of 40 characters."
        },
        {
          "parameter": "current_amount",
          "type": "integer",
          "description": "The goal’s current value.. . The goal’s type determines how this value is increased or decreased. If type is follower, this field is set to the broadcaster's current number of followers. This number increases with new followers and decreases when users unfollow the broadcaster.If type is subscription, this field is increased and decreased by the points value associated with the subscription tier. For example, if a tier-two subscription is worth 2 points, this field is increased or decreased by 2, not 1.If type is subscription_count, this field is increased by 1 for each new subscription and decreased by 1 for each user that unsubscribes.If type is new_subscription, this field is increased by the points value associated with the subscription tier. For example, if a tier-two subscription is worth 2 points, this field is increased by 2, not 1.If type is new_subscription_count, this field is increased by 1 for each new subscription."
        },
        {
          "parameter": "target_amount",
          "type": "integer",
          "description": "The goal’s target value. For example, if the broadcaster has 200 followers before creating the goal, and their goal is to double that number, this field is set to 400."
        },
        {
          "parameter": "created_at",
          "type": "string",
          "description": "The UTC timestamp in RFC 3339 format, which indicates when the broadcaster created the goal."
        }
      ]
    },
    {
      "title": "Get Hype Train Events",
      "authentication": "channel:read:hype_train",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/hypetrain/events"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "User ID of the broadcaster. Must match the User ID in the Bearer token if User Token is used."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "first",
          "type": "integer",
          "description": "Maximum number of objects to return. Maximum: 100. Default: 1."
        },
        {
          "parameter": "cursor",
          "type": "string",
          "description": "Cursor for forward pagination: tells the server where to start fetching the next set of results in a multi-page response. This applies only to queries without id. If an ID is specified, it supersedes any cursor/offset combinations. The cursor value specified here is from the pagination response field of a prior query."
        }
      ],
      "response_fields": [
        {
          "parameter": "id",
          "type": "string",
          "description": "The distinct ID of the event"
        },
        {
          "parameter": "event_type",
          "type": "string",
          "description": "Displays hypetrain.{event_name}, currently only hypetrain.progression"
        },
        {
          "parameter": "event_timestamp",
          "type": "string",
          "description": "RFC3339 formatted timestamp of event"
        },
        {
          "parameter": "version",
          "type": "string",
          "description": "Returns the version of the endpoint"
        },
        {
          "parameter": "event_data",
          "type": "object",
          "description": "(See below for the schema)"
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "The distinct ID of this Hype Train"
        },
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "Channel ID of which Hype Train events the clients are interested in"
        },
        {
          "parameter": "started_at",
          "type": "string",
          "description": "RFC3339 formatted timestamp of when this Hype Train started"
        },
        {
          "parameter": "expires_at",
          "type": "string",
          "description": "RFC3339 formatted timestamp of the expiration time of this Hype Train"
        },
        {
          "parameter": "cooldown_end_time",
          "type": "string",
          "description": "RFC3339 formatted timestamp of when another Hype Train can be started again"
        },
        {
          "parameter": "level",
          "type": "integer",
          "description": "The highest level (in the scale of 1-5) reached of the Hype Train"
        },
        {
          "parameter": "goal",
          "type": "integer",
          "description": "The goal value of the level above"
        },
        {
          "parameter": "total",
          "type": "integer",
          "description": "The total score so far towards completing the level goal above"
        },
        {
          "parameter": "top_contributions",
          "type": "object",
          "description": "An array of top contribution objects, one object for each type.  For example, one object would represent top contributor of BITS, by aggregate, and one would represent top contributor of SUBS by count."
        },
        {
          "parameter": "total",
          "type": "integer",
          "description": "Total aggregated amount of all contributions by the top contributor. If type is BITS, total represents aggregate amount of bits used.  If type is SUBS, aggregate total where 500, 1000, or 2500 represent tier 1, 2, or 3 subscriptions respectively.  For example, if top contributor has gifted a tier 1, 2, and 3 subscription, total would be 4000."
        },
        {
          "parameter": "type",
          "type": "string",
          "description": "Identifies the contribution method, either BITS or SUBS"
        },
        {
          "parameter": "user",
          "type": "string",
          "description": "ID of the contributing user"
        },
        {
          "parameter": "last_contribution",
          "type": "object",
          "description": "An object that represents the most recent contribution"
        },
        {
          "parameter": "total",
          "type": "integer",
          "description": "Total amount contributed. If type is BITS, total represents amounts of bits used.  If type is SUBS, total is 500, 1000, or 2500 to represent tier 1, 2, or 3 subscriptions respectively"
        },
        {
          "parameter": "type",
          "type": "string",
          "description": "Identifies the contribution method, either BITS or SUBS"
        },
        {
          "parameter": "user",
          "type": "string",
          "description": "ID of the contributing user"
        },
        {
          "parameter": "pagination",
          "type": "string",
          "description": "A cursor value, to be used in a subsequent requests to specify the starting point of the next set of results"
        }
      ]
    },
    {
      "title": "Check AutoMod Status",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "POST",
        "url": "https://api.twitch.tv/helix/moderation/enforcements/status"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "msg_id",
          "type": "string",
          "description": "The msg_id passed in the body of the POST message. Maps each message to its status."
        },
        {
          "parameter": "is_permitted",
          "type": "Boolean",
          "description": "Indicates if this message meets AutoMod requirements."
        }
      ]
    },
    {
      "title": "Manage Held AutoMod Messages",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "POST",
        "url": "https://api.twitch.tv/helix/moderation/automod/message"
      },
      "required_query_parameters": [],
      "required_body_parameters": [
        {
          "parameter": "user_id",
          "type": "string",
          "description": "The moderator who is approving or rejecting the held message. Must match the user_id in the user OAuth token."
        },
        {
          "parameter": "msg_id",
          "type": "string",
          "description": "ID of the message to be allowed or denied. These message IDs are retrieved from PubSub as mentioned above. Only one message ID can be provided."
        },
        {
          "parameter": "action",
          "type": "string",
          "description": "The action to take for the message. Must be \"ALLOW\" or \"DENY\"."
        }
      ],
      "optional_query_parameters": [],
      "response_fields": []
    },
    {
      "title": "Get AutoMod Settings",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/moderation/automod/settings"
      },
      "required_query_parameters": [
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "The ID of the broadcaster whose AutoMod settings you want to get."
        },
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "The ID of a user that has permission to moderate the broadcaster’s chat room. This ID must match the user ID associated with the user OAuth token.. . If the broadcaster wants to get their own AutoMod settings (instead of having the moderator do it), set this parameter to the broadcaster’s ID, too."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": []
    },
    {
      "title": "Update AutoMod Settings",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "PUT",
        "url": "https://api.twitch.tv/helix/moderation/automod/settings"
      },
      "required_query_parameters": [
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "The ID of the broadcaster whose AutoMod settings you want to update."
        },
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "The ID of a user that has permission to moderate the broadcaster’s chat room. This ID must match the user ID associated with the user OAuth token.. . If the broadcaster wants to update their own AutoMod settings (instead of having the moderator do it), set this parameter to the broadcaster’s ID, too."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": []
    },
    {
      "title": "Get Banned Users",
      "authentication": "moderation:read",
      "pagination_support": {
        "forward": true,
        "reverse": true
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/moderation/banned"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "Provided broadcaster_id must match the user_id in the OAuth token."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "user_id",
          "type": "string",
          "description": "Filters the results and only returns a status object for users who are banned in the channel and have a matching user_id.. . Multiple user IDs can be provided, e.g. /moderation/banned?broadcaster_id=1&amp;user_id=2&amp;user_id=3. . Maximum: 100."
        },
        {
          "parameter": "first",
          "type": "string",
          "description": "Maximum number of objects to return.. . Maximum: 100.. Default: 1."
        },
        {
          "parameter": "after",
          "type": "string",
          "description": "Cursor for forward pagination: tells the server where to start fetching the next set of results in a multi-page response. This applies only to queries without user_id. If a user_id is specified, it supersedes any cursor/offset combinations. The cursor value specified here is from the pagination response field of a prior query."
        },
        {
          "parameter": "before",
          "type": "string",
          "description": "Cursor for backward pagination: tells the server where to start fetching the next set of results in a multi-page response. This applies only to queries without user_id. If a user_id is specified, it supersedes any cursor/offset. combinations. The cursor value specified here is from the pagination response field of a prior query."
        }
      ],
      "response_fields": [
        {
          "parameter": "user_id",
          "type": "string",
          "description": "User ID of the banned user."
        },
        {
          "parameter": "user_login",
          "type": "string",
          "description": "Login of the banned user."
        },
        {
          "parameter": "user_name",
          "type": "string",
          "description": "Display name of the banned user."
        },
        {
          "parameter": "expires_at",
          "type": "string",
          "description": "The UTC date and time (in RFC3999 format) when the timeout expires, or an empty string if the user is permanently banned."
        },
        {
          "parameter": "created_at",
          "type": "string",
          "description": "The UTC date and time (in RFC3999 format) when the ban was created."
        },
        {
          "parameter": "reason",
          "type": "string",
          "description": "The reason for the ban if provided by the moderator."
        },
        {
          "parameter": "moderator_id",
          "type": "string",
          "description": "User ID of the moderator who initiated the ban."
        },
        {
          "parameter": "moderator_login",
          "type": "string",
          "description": "Login of the moderator who initiated the ban."
        },
        {
          "parameter": "moderator_name",
          "type": "string",
          "description": "Display name of the moderator who initiated the ban."
        },
        {
          "parameter": "pagination",
          "type": "object containing a string",
          "description": "A cursor value, to be used in a subsequent request to specify the starting point of the next set of results."
        }
      ]
    },
    {
      "title": "Ban User",
      "authentication": "moderator:manage:banned_users",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "POST",
        "url": "https://api.twitch.tv/helix/moderation/bans"
      },
      "required_query_parameters": [
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "The ID of the broadcaster whose chat room the user is being banned from."
        },
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "The ID of a user that has permission to moderate the broadcaster’s chat room. This ID must match the user ID associated with the user OAuth token.. . If the broadcaster wants to ban the user (instead of having the moderator do it), set this parameter to the broadcaster’s ID, too."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": []
    },
    {
      "title": "Unban User",
      "authentication": "moderator:manage:banned_users",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "DELETE",
        "url": "https://api.twitch.tv/helix/moderation/bans"
      },
      "required_query_parameters": [
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "The ID of the broadcaster whose chat room the user is banned from chatting in."
        },
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "The ID of a user that has permission to moderate the broadcaster’s chat room. This ID must match the user ID associated with the user OAuth token.. . If the broadcaster wants to remove the ban (instead of having the moderator do it), set this parameter to the broadcaster’s ID, too."
        },
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "The ID of the user to remove the ban or timeout from."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": []
    },
    {
      "title": "Get Blocked Terms",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/moderation/blocked_terms"
      },
      "required_query_parameters": [
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "The ID of the broadcaster whose blocked terms you’re getting."
        },
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "The ID of a user that has permission to moderate the broadcaster’s chat room. This ID must match the user ID associated with the user OAuth token.. . If the broadcaster wants to get their own block terms (instead of having the moderator do it), set this parameter to the broadcaster’s ID, too."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "The cursor used to get the next page of results. The Pagination object in the response contains the cursor’s value."
        },
        {
          "parameter": "\n      ",
          "type": "Integer",
          "description": "The maximum number of blocked terms to return per page in the response. The minimum page size is 1 blocked term per page and the maximum is 100. The default is 20."
        }
      ],
      "response_fields": []
    },
    {
      "title": "Add Blocked Term",
      "authentication": "moderator:manage:blocked_terms",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "POST",
        "url": "https://api.twitch.tv/helix/moderation/blocked_terms"
      },
      "required_query_parameters": [
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "The ID of the broadcaster that owns the list of blocked terms."
        },
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "The ID of a user that has permission to moderate the broadcaster’s chat room. This ID must match the user ID associated with the user OAuth token.. . If the broadcaster wants to add the blocked term (instead of having the moderator do it), set this parameter to the broadcaster’s ID, too."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": []
    },
    {
      "title": "Remove Blocked Term",
      "authentication": "moderator:manage:blocked_terms",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "DELETE",
        "url": "https://api.twitch.tv/helix/moderation/blocked_terms"
      },
      "required_query_parameters": [
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "The ID of the broadcaster that owns the list of blocked terms."
        },
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "The ID of the blocked term you want to delete."
        },
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the user ID associated with the user OAuth token."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": []
    },
    {
      "title": "Delete Chat Messages",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "DELETE",
        "url": "https://api.twitch.tv/helix/moderation/chat"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "\n      ",
          "type": "Yes",
          "description": "The ID of the broadcaster that owns the chat room to remove messages from."
        },
        {
          "parameter": "\n      ",
          "type": "Yes",
          "description": "The ID of a user that has permission to moderate the broadcaster’s chat room. This ID must match the user ID in the OAuth token. If the broadcaster wants to remove messages themselves, set this parameter to the broadcaster’s ID, too."
        },
        {
          "parameter": "\n      ",
          "type": "No",
          "description": "The ID of the message to remove. The id tag in the PRIVMSG contains the message’s ID (see PRIVMSG Tags). Restrictions:The message must have been created within the last 6 hours.The message must not belong to the broadcaster.The message must not belong to another moderator.If not specified, the request removes all messages in the broadcaster’s chat room."
        }
      ],
      "response_fields": []
    },
    {
      "title": "Get Moderators",
      "authentication": "",
      "pagination_support": {
        "forward": true,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/moderation/moderators"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "Provided broadcaster_id must match the user_id in the auth token. Maximum: 1"
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "user_id",
          "type": "string",
          "description": "Filters the results and only returns a status object for users who are moderators in this channel and have a matching user_id.. . Format: Repeated Query Parameter, eg. /moderation/moderators?broadcaster_id=1&amp;user_id=2&amp;user_id=3. . Maximum: 100"
        },
        {
          "parameter": "first",
          "type": "string",
          "description": "Maximum number of objects to return. Maximum: 100. Default: 20."
        },
        {
          "parameter": "after",
          "type": "string",
          "description": "Cursor for forward pagination: tells the server where to start fetching the next set of results in a multi-page response. This applies only to queries without user_id. If a user_id is specified, it supersedes any cursor/offset combinations. The cursor value specified here is from the pagination response field of a prior query."
        }
      ],
      "response_fields": [
        {
          "parameter": "user_id",
          "type": "string",
          "description": "User ID of a moderator in the channel."
        },
        {
          "parameter": "user_login",
          "type": "string",
          "description": "Login of a moderator in the channel."
        },
        {
          "parameter": "user_name",
          "type": "string",
          "description": "Display name of a moderator in the channel."
        },
        {
          "parameter": "pagination",
          "type": "object containing a string",
          "description": "A cursor value, to be used in subsequent requests to specify the starting point of the next set of results."
        }
      ]
    },
    {
      "title": "Add Channel Moderator",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "POST",
        "url": "https://api.twitch.tv/helix/moderation/moderators"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "\n      ",
          "type": "Yes",
          "description": "The ID of the broadcaster that owns the chat room."
        },
        {
          "parameter": "\n      ",
          "type": "Yes",
          "description": "The ID of the user to add as a moderator in the broadcaster’s chat room."
        }
      ],
      "response_fields": []
    },
    {
      "title": "Remove Channel Moderator",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "DELETE",
        "url": "https://api.twitch.tv/helix/moderation/moderators"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "\n      ",
          "type": "Yes",
          "description": "The ID of the broadcaster that owns the chat room."
        },
        {
          "parameter": "\n      ",
          "type": "Yes",
          "description": "The ID of the user to remove as a moderator from the broadcaster’s chat room."
        }
      ],
      "response_fields": []
    },
    {
      "title": "Get VIPs",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/channels/vips"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "\n      ",
          "type": "No",
          "description": "Filters the list for specific VIPs. To specify more than one user, include the user_id parameter for each user to get. For example, &amp;user_id=1234&amp;user_id=5678. The maximum number of IDs that you may specify is 100. Ignores those users in the list that aren’t VIPs."
        },
        {
          "parameter": "\n      ",
          "type": "Yes",
          "description": "The ID of the broadcaster whose list of VIPs you want to get."
        },
        {
          "parameter": "\n      ",
          "type": "No",
          "description": "The maximum number of items to return per page in the response. The minimum page size is 1 item per page and the maximum is 100. The default is 20."
        },
        {
          "parameter": "\n      ",
          "type": "No",
          "description": "The cursor used to get the next page of results. The Pagination object in the response contains the cursor’s value. Read more."
        }
      ],
      "response_fields": []
    },
    {
      "title": "Add Channel VIP",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "POST",
        "url": "https://api.twitch.tv/helix/channels/vips"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "\n      ",
          "type": "Yes",
          "description": "The ID of the user to add as a VIP in the broadcaster’s chat room."
        },
        {
          "parameter": "\n      ",
          "type": "Yes",
          "description": "The ID of the broadcaster that’s granting VIP status to the user."
        }
      ],
      "response_fields": []
    },
    {
      "title": "Remove Channel VIP",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "DELETE",
        "url": "https://api.twitch.tv/helix/channels/vips"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "\n      ",
          "type": "Yes",
          "description": "The ID of the user to remove as a VIP from the broadcaster’s chat room."
        },
        {
          "parameter": "\n      ",
          "type": "Yes",
          "description": "The ID of the broadcaster that’s removing VIP status from the user."
        }
      ],
      "response_fields": []
    },
    {
      "title": "Get Polls",
      "authentication": "",
      "pagination_support": {
        "forward": true,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/polls"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "The broadcaster running polls. Provided broadcaster_id must match the user_id in the user OAuth token.. . Maximum: 1"
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "id",
          "type": "string",
          "description": "ID of the poll."
        },
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "ID of the broadcaster."
        },
        {
          "parameter": "broadcaster_name",
          "type": "string",
          "description": "Name of the broadcaster."
        },
        {
          "parameter": "broadcaster_login",
          "type": "string",
          "description": "Login of the broadcaster."
        },
        {
          "parameter": "title",
          "type": "string",
          "description": "Question displayed for the poll."
        },
        {
          "parameter": "choices",
          "type": "object[]",
          "description": "Array of the poll choices."
        },
        {
          "parameter": "choice.id",
          "type": "string",
          "description": "ID for the choice."
        },
        {
          "parameter": "choice.title",
          "type": "string",
          "description": "Text displayed for the choice."
        },
        {
          "parameter": "choice.votes",
          "type": "integer",
          "description": "Total number of votes received for the choice across all methods of voting."
        },
        {
          "parameter": "choice.channel_points_votes",
          "type": "integer",
          "description": "Number of votes received via Channel Points."
        },
        {
          "parameter": "choice.bits_votes",
          "type": "integer",
          "description": "Number of votes received via Bits."
        },
        {
          "parameter": "bits_voting_enabled",
          "type": "boolean",
          "description": "Indicates if Bits can be used for voting."
        },
        {
          "parameter": "bits_per_vote",
          "type": "integer",
          "description": "Number of Bits required to vote once with Bits."
        },
        {
          "parameter": "channel_points_voting_enabled",
          "type": "boolean",
          "description": "Indicates if Channel Points can be used for voting."
        },
        {
          "parameter": "channel_points_per_vote",
          "type": "integer",
          "description": "Number of Channel Points required to vote once with Channel Points."
        },
        {
          "parameter": "status",
          "type": "string",
          "description": "Poll status. Valid values are:. . ACTIVE: Poll is currently in progress.. . COMPLETED: Poll has reached its ended_at time.. . TERMINATED: Poll has been manually terminated before its ended_at time.. . ARCHIVED: Poll is no longer visible on the channel.. . MODERATED: Poll is no longer visible to any user on Twitch.. . INVALID: Something went wrong determining the state."
        },
        {
          "parameter": "duration",
          "type": "integer",
          "description": "Total duration for the poll (in seconds)."
        },
        {
          "parameter": "started_at",
          "type": "string",
          "description": "UTC timestamp for the poll’s start time."
        },
        {
          "parameter": "ended_at",
          "type": "string",
          "description": "UTC timestamp for the poll’s end time. Set to null if the poll is active."
        }
      ]
    },
    {
      "title": "Create Poll",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "POST",
        "url": "https://api.twitch.tv/helix/polls"
      },
      "required_query_parameters": [],
      "required_body_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "The broadcaster running polls. Provided broadcaster_id must match the user_id in the user OAuth token.. . Maximum: 1"
        },
        {
          "parameter": "title",
          "type": "string",
          "description": "Question displayed for the poll.. . Maximum: 60 characters."
        },
        {
          "parameter": "choices",
          "type": "object[]",
          "description": "Array of the poll choices.. . Minimum: 2 choices. Maximum: 5 choices."
        },
        {
          "parameter": "choice.title",
          "type": "string",
          "description": "Text displayed for the choice.. . Maximum: 25 characters."
        },
        {
          "parameter": "duration",
          "type": "integer",
          "description": "Total duration for the poll (in seconds).. . Minimum: 15. Maximum: 1800."
        }
      ],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "id",
          "type": "string",
          "description": "ID of the poll."
        },
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "ID of the broadcaster."
        },
        {
          "parameter": "broadcaster_name",
          "type": "string",
          "description": "Name of the broadcaster."
        },
        {
          "parameter": "broadcaster_login",
          "type": "string",
          "description": "Login of the broadcaster."
        },
        {
          "parameter": "title",
          "type": "string",
          "description": "Question displayed for the poll."
        },
        {
          "parameter": "choices",
          "type": "object[]",
          "description": "Array of the poll choices."
        },
        {
          "parameter": "choice.id",
          "type": "string",
          "description": "ID for the choice."
        },
        {
          "parameter": "choice.title",
          "type": "string",
          "description": "Text displayed for the choice."
        },
        {
          "parameter": "choice.votes",
          "type": "integer",
          "description": "Total number of votes received for the choice."
        },
        {
          "parameter": "choice.channel_points_votes",
          "type": "integer",
          "description": "Number of votes received via Channel Points."
        },
        {
          "parameter": "choice.bits_votes",
          "type": "integer",
          "description": "Not used; will be set to 0."
        },
        {
          "parameter": "bits_voting_enabled",
          "type": "boolean",
          "description": "Not used; will be set to false."
        },
        {
          "parameter": "bits_per_vote",
          "type": "integer",
          "description": "Not used; will be set to 0."
        },
        {
          "parameter": "channel_points_voting_enabled",
          "type": "boolean",
          "description": "Indicates if Channel Points can be used for voting."
        },
        {
          "parameter": "channel_points_per_vote",
          "type": "integer",
          "description": "Number of Channel Points required to vote once with Channel Points."
        },
        {
          "parameter": "status",
          "type": "string",
          "description": "Poll status. Valid values are:. . ACTIVE: Poll is currently in progress.. . COMPLETED: Poll has reached its ended_at time.. . TERMINATED: Poll has been manually terminated before its ended_at time.. . ARCHIVED: Poll is no longer visible on the channel.. . MODERATED: Poll is no longer visible to any user on Twitch.. . INVALID: Something went wrong determining the state."
        },
        {
          "parameter": "duration",
          "type": "integer",
          "description": "Total duration for the poll (in seconds)."
        },
        {
          "parameter": "started_at",
          "type": "string",
          "description": "UTC timestamp for the poll’s start time."
        },
        {
          "parameter": "ended_at",
          "type": "string",
          "description": "UTC timestamp for the poll’s end time. Set to null if the poll is active."
        }
      ]
    },
    {
      "title": "End Poll",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "PATCH",
        "url": "https://api.twitch.tv/helix/polls"
      },
      "required_query_parameters": [],
      "required_body_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "The broadcaster running polls. Provided broadcaster_id must match the user_id in the user OAuth token.. . Maximum: 1"
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "ID of the poll."
        },
        {
          "parameter": "status",
          "type": "string",
          "description": "The poll status to be set. Valid values:. . TERMINATED: End the poll manually, but allow it to be viewed publicly.. . ARCHIVED: End the poll manually and do not allow it to be viewed publicly."
        }
      ],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "id",
          "type": "string",
          "description": "ID of the poll."
        },
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "ID of the broadcaster."
        },
        {
          "parameter": "broadcaster_name",
          "type": "string",
          "description": "Name of the broadcaster."
        },
        {
          "parameter": "broadcaster_login",
          "type": "string",
          "description": "Login of the broadcaster."
        },
        {
          "parameter": "title",
          "type": "string",
          "description": "Question displayed for the poll."
        },
        {
          "parameter": "choices",
          "type": "object[]",
          "description": "Array of the poll choices."
        },
        {
          "parameter": "choice.id",
          "type": "string",
          "description": "ID for the choice."
        },
        {
          "parameter": "choice.title",
          "type": "string",
          "description": "Text displayed for the choice."
        },
        {
          "parameter": "choice.votes",
          "type": "integer",
          "description": "Total number of votes received for the choice."
        },
        {
          "parameter": "choice.channel_points_votes",
          "type": "integer",
          "description": "Number of votes received via Channel Points."
        },
        {
          "parameter": "choice.bits_votes",
          "type": "integer",
          "description": "Number of votes received via Bits."
        },
        {
          "parameter": "bits_voting_enabled",
          "type": "boolean",
          "description": "Indicates if Bits can be used for voting."
        },
        {
          "parameter": "bits_per_vote",
          "type": "integer",
          "description": "Number of Bits required to vote once with Bits."
        },
        {
          "parameter": "channel_points_voting_enabled",
          "type": "boolean",
          "description": "Indicates if Channel Points can be used for voting."
        },
        {
          "parameter": "channel_points_per_vote",
          "type": "integer",
          "description": "Number of Channel Points required to vote once with Channel Points."
        },
        {
          "parameter": "status",
          "type": "string",
          "description": "Poll Status. Valid values are:. . ACTIVE: Poll is currently in progress.. . COMPLETED: Poll has reached its ended_at time.. . TERMINATED: Poll has been manually terminated before its ended_at time.. . ARCHIVED: Poll is no longer visible on the channel.. . MODERATED: Poll is no longer visible to any user on Twitch.. . INVALID: Something went wrong determining the state."
        },
        {
          "parameter": "duration",
          "type": "integer",
          "description": "Total duration for the poll (in seconds)."
        },
        {
          "parameter": "started_at",
          "type": "string",
          "description": "UTC timestamp for the poll’s start time."
        },
        {
          "parameter": "ended_at",
          "type": "string",
          "description": "UTC timestamp for the poll’s end time."
        }
      ]
    },
    {
      "title": "Get Predictions",
      "authentication": "",
      "pagination_support": {
        "forward": true,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/predictions"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "The broadcaster running Predictions. Provided broadcaster_id must match the user_id in the user OAuth token.. . Maximum: 1"
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "id",
          "type": "string",
          "description": "ID of the Prediction."
        },
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "ID of the broadcaster."
        },
        {
          "parameter": "broadcaster_name",
          "type": "string",
          "description": "Name of the broadcaster."
        },
        {
          "parameter": "broadcaster_login",
          "type": "string",
          "description": "Login of the broadcaster."
        },
        {
          "parameter": "title",
          "type": "string",
          "description": "Title for the Prediction."
        },
        {
          "parameter": "winning_outcome_id",
          "type": "string",
          "description": "ID of the winning outcome. If the status is ACTIVE, this is set to null."
        },
        {
          "parameter": "outcomes",
          "type": "object[]",
          "description": "Array of possible outcomes for the Prediction."
        },
        {
          "parameter": "outcome.id",
          "type": "string",
          "description": "ID for the outcome."
        },
        {
          "parameter": "outcome.title",
          "type": "string",
          "description": "Text displayed for outcome."
        },
        {
          "parameter": "outcome.users",
          "type": "integer",
          "description": "Number of unique users that chose the outcome."
        },
        {
          "parameter": "outcome.channel_points",
          "type": "integer",
          "description": "Number of Channel Points used for the outcome."
        },
        {
          "parameter": "outcome.top_predictors",
          "type": "object[]",
          "description": "Array of users who were the top predictors. null if none."
        },
        {
          "parameter": "outcome.top_predictors.user.user_id",
          "type": "string",
          "description": "ID of the user."
        },
        {
          "parameter": "outcome.top_predictors.user.user_name",
          "type": "string",
          "description": "Display name of the user."
        },
        {
          "parameter": "outcome.top_predictors.user.user_login",
          "type": "string",
          "description": "Login of the user."
        },
        {
          "parameter": "outcome.top_predictors.user.channel_points_used",
          "type": "integer",
          "description": "Number of Channel Points used by the user."
        },
        {
          "parameter": "outcome.top_predictors.user.channel_points_won",
          "type": "integer",
          "description": "Number of Channel Points won by the user."
        },
        {
          "parameter": "outcome.color",
          "type": "string",
          "description": "Color for the outcome. If the number of outcomes is two, the color is BLUE for the first one and PINK for the second one. If there are more than two outcomes, the color is BLUE for all of them."
        },
        {
          "parameter": "prediction_window",
          "type": "integer",
          "description": "Total duration for the Prediction (in seconds)."
        },
        {
          "parameter": "status",
          "type": "string",
          "description": "Status of the Prediction. Valid values are:. . RESOLVED: A winning outcome has been chosen and the Channel Points have been distributed to the users who guessed the correct outcome.. . ACTIVE: The Prediction is active and viewers can make predictions.. . CANCELED: The Prediction has been canceled and the Channel Points have been refunded to participants.. . LOCKED: The Prediction has been locked and viewers can no longer make predictions."
        },
        {
          "parameter": "created_at",
          "type": "string",
          "description": "UTC timestamp for the Prediction’s start time."
        },
        {
          "parameter": "ended_at",
          "type": "string",
          "description": "UTC timestamp for when the Prediction ended. If the status is ACTIVE, this is set to null."
        },
        {
          "parameter": "locked_at",
          "type": "string",
          "description": "UTC timestamp for when the Prediction was locked. If the status is not LOCKED, this is set to null."
        }
      ]
    },
    {
      "title": "Create Prediction",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "POST",
        "url": "https://api.twitch.tv/helix/predictions"
      },
      "required_query_parameters": [],
      "required_body_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "The broadcaster running Predictions. Provided broadcaster_id must match the user_id in the user OAuth token.. . Maximum: 1"
        },
        {
          "parameter": "title",
          "type": "string",
          "description": "Title for the Prediction.. . Maximum: 45 characters."
        },
        {
          "parameter": "outcomes",
          "type": "object[]",
          "description": "The list of possible outcomes for the Prediction. The minimum number of outcomes that you may specify is 2 and the maximum is 10."
        },
        {
          "parameter": "outcome.title",
          "type": "string",
          "description": "Text displayed for the outcome choice.. . Maximum: 25 characters."
        },
        {
          "parameter": "prediction_window",
          "type": "integer",
          "description": "Total duration for the Prediction (in seconds).. . Minimum: 1. Maximum: 1800."
        }
      ],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "id",
          "type": "string",
          "description": "ID of the Prediction."
        },
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "ID of the broadcaster."
        },
        {
          "parameter": "broadcaster_login",
          "type": "string",
          "description": "Login of the broadcaster."
        },
        {
          "parameter": "broadcaster_name",
          "type": "string",
          "description": "Name of the broadcaster."
        },
        {
          "parameter": "title",
          "type": "string",
          "description": "Title for the Prediction."
        },
        {
          "parameter": "winning_outcome_id",
          "type": "string",
          "description": "ID of the winning outcome."
        },
        {
          "parameter": "outcomes",
          "type": "object[]",
          "description": "Array of possible outcomes for the Prediction."
        },
        {
          "parameter": "outcome.id",
          "type": "string",
          "description": "ID for the outcome."
        },
        {
          "parameter": "outcome.title",
          "type": "string",
          "description": "Text displayed for outcome."
        },
        {
          "parameter": "outcome.users",
          "type": "integer",
          "description": "Number of unique uesrs that chose the outcome."
        },
        {
          "parameter": "outcome.channel_points",
          "type": "integer",
          "description": "Number of Channel Points used for the outcome."
        },
        {
          "parameter": "outcome.color",
          "type": "string",
          "description": "Color for the outcome. If the number of outcomes is two, the color is BLUE for the first one and PINK for the second one. If there are more than two outcomes, the color is BLUE for all of them."
        },
        {
          "parameter": "outcome.top_predictors",
          "type": "object[]",
          "description": "Array of users who were the top predictors."
        },
        {
          "parameter": "outcome.top_predictors.user.id",
          "type": "string",
          "description": "ID of the user."
        },
        {
          "parameter": "outcome.top_predictors.user.name",
          "type": "string",
          "description": "Display name of the user."
        },
        {
          "parameter": "outcome.top_predictors.user.login",
          "type": "string",
          "description": "Login of the user."
        },
        {
          "parameter": "outcome.top_predictors.user.channel_points_used",
          "type": "integer",
          "description": "Number of Channel Points used by the user."
        },
        {
          "parameter": "outcome.top_predictors.user.channel_points_won",
          "type": "integer",
          "description": "Number of Channel Points won by the user."
        },
        {
          "parameter": "prediction_window",
          "type": "integer",
          "description": "Total duration for the Prediction (in seconds)."
        },
        {
          "parameter": "status",
          "type": "string",
          "description": "Status of the Prediction. Valid values are:. . RESOLVED: A winning outcome has been chosen and the Channel Points have been distributed to the users who predicted the correct outcome.. . ACTIVE: The Prediction is active and viewers can make predictions.. . CANCELED: The Prediction has been canceled and the Channel Points have been refunded to participants.. . LOCKED: The Prediction has been locked and viewers can no longer make predictions."
        },
        {
          "parameter": "created_at",
          "type": "string",
          "description": "UTC timestamp for the Prediction’s start time."
        },
        {
          "parameter": "ended_at",
          "type": "string",
          "description": "UTC timestamp for when the Prediction ended. If the status is ACTIVE, this is set to null."
        },
        {
          "parameter": "locked_at",
          "type": "string",
          "description": "UTC timestamp for when the Prediction was locked. If the status is not LOCKED, this is set to null."
        }
      ]
    },
    {
      "title": "End Prediction",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "PATCH",
        "url": "https://api.twitch.tv/helix/predictions"
      },
      "required_query_parameters": [],
      "required_body_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "The broadcaster running prediction events. Provided broadcaster_id must match the user_id in the user OAuth token.. . Maximum: 1"
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "ID of the Prediction."
        },
        {
          "parameter": "status",
          "type": "string",
          "description": "The Prediction status to be set. Valid values:. . RESOLVED: A winning outcome has been chosen and the Channel Points have been distributed to the users who predicted the correct outcome.. . CANCELED: The Prediction has been canceled and the Channel Points have been refunded to participants.. . LOCKED: The Prediction has been locked and viewers can no longer make predictions."
        }
      ],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "id",
          "type": "string",
          "description": "ID of the prediction."
        },
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "ID of the broadcaster."
        },
        {
          "parameter": "broadcaster_login",
          "type": "string",
          "description": "Login of the broadcaster."
        },
        {
          "parameter": "broadcaster_name",
          "type": "string",
          "description": "Name of the broadcaster."
        },
        {
          "parameter": "title",
          "type": "string",
          "description": "Title for the prediction."
        },
        {
          "parameter": "winning_outcome_id",
          "type": "string",
          "description": "ID of the winning outcome."
        },
        {
          "parameter": "outcomes",
          "type": "object[]",
          "description": "Array of possible outcomes for the prediction."
        },
        {
          "parameter": "outcome.id",
          "type": "string",
          "description": "ID for the outcome."
        },
        {
          "parameter": "outcome.title",
          "type": "string",
          "description": "Text displayed for outcome."
        },
        {
          "parameter": "outcome.users",
          "type": "integer",
          "description": "Number of unique uesrs that chose the outcome."
        },
        {
          "parameter": "outcome.channel_points",
          "type": "integer",
          "description": "Number of Channel Points used for the outcome."
        },
        {
          "parameter": "outcome.color",
          "type": "string",
          "description": "Color for the outcome. If the number of outcomes is two, the color is BLUE for the first one and PINK for the second one. If there are more than two outcomes, the color is BLUE for all of them."
        },
        {
          "parameter": "outcome.top_predictors",
          "type": "object[]",
          "description": "Array of users who were the top predictors."
        },
        {
          "parameter": "outcome.top_predictors.user.id",
          "type": "string",
          "description": "ID of the user."
        },
        {
          "parameter": "outcome.top_predictors.user.name",
          "type": "string",
          "description": "Display name of the user."
        },
        {
          "parameter": "outcome.top_predictors.user.login",
          "type": "string",
          "description": "Login of the user."
        },
        {
          "parameter": "outcome.top_predictors.user.channel_points_used",
          "type": "integer",
          "description": "Number of Channel Points used by the user."
        },
        {
          "parameter": "outcome.top_predictors.user.channel_points_won",
          "type": "integer",
          "description": "Number of Channel Points won by the user."
        },
        {
          "parameter": "prediction_window",
          "type": "integer",
          "description": "Total duration for the prediction (in seconds)."
        },
        {
          "parameter": "status",
          "type": "string",
          "description": "Status of the prediction. Valid values are:. . RESOLVED: A winning outcome has been chosen and the Channel Points have been distributed to the users who predicted the correct outcome.. . ACTIVE: The Prediction is active and viewers can make predictions.. . CANCELED: The Prediction has been canceled and the Channel Points have been refunded to participants.. . LOCKED: The Prediction has been locked and viewers can no longer make predictions."
        },
        {
          "parameter": "created_at",
          "type": "string",
          "description": "UTC timestamp for the prediction’s start time."
        },
        {
          "parameter": "ended_at",
          "type": "string",
          "description": "UTC timestamp for when the prediction ended. If the status is ACTIVE, this is set to null."
        },
        {
          "parameter": "locked_at",
          "type": "string",
          "description": "UTC timestamp for when the prediction was locked. If the status is not LOCKED, this is set to null."
        }
      ]
    },
    {
      "title": "Start a raid",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "POST",
        "url": "https://api.twitch.tv/helix/raids"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": []
    },
    {
      "title": "Cancel a raid",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "DELETE",
        "url": "https://api.twitch.tv/helix/raids"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": []
    },
    {
      "title": "Get Channel Stream Schedule",
      "authentication": "",
      "pagination_support": {
        "forward": true,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/schedule"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "User ID of the broadcaster who owns the channel streaming schedule.. . Maximum: 1"
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "id",
          "type": "string",
          "description": "The ID of the stream segment to return.. . Maximum: 100."
        },
        {
          "parameter": "start_time",
          "type": "string",
          "description": "A timestamp in RFC3339 format to start returning stream segments from. If not specified, the current date and time is used."
        },
        {
          "parameter": "utc_offset",
          "type": "string",
          "description": "A timezone offset for the requester specified in minutes. This is recommended to ensure stream segments are returned for the correct week. For example, a timezone that is +4 hours from GMT would be “240.” If not specified, “0” is used for GMT."
        },
        {
          "parameter": "first",
          "type": "integer",
          "description": "Maximum number of stream segments to return.. . Maximum: 25. Default: 20."
        },
        {
          "parameter": "after",
          "type": "string",
          "description": "Cursor for forward pagination: tells the server where to start fetching the next set of results in a multi-page response. The cursor value specified here is from the pagination response field of a prior query."
        }
      ],
      "response_fields": [
        {
          "parameter": "segments",
          "type": "array of objects",
          "description": "Scheduled broadcasts for this stream schedule."
        },
        {
          "parameter": "segment.id",
          "type": "string",
          "description": "The ID for the scheduled broadcast."
        },
        {
          "parameter": "segment.start_time",
          "type": "string",
          "description": "Scheduled start time for the scheduled broadcast in RFC3339 format."
        },
        {
          "parameter": "segment.end_time",
          "type": "string",
          "description": "Scheduled end time for the scheduled broadcast in RFC3339 format."
        },
        {
          "parameter": "segment.title",
          "type": "string",
          "description": "Title for the scheduled broadcast."
        },
        {
          "parameter": "segment.canceled_until",
          "type": "string",
          "description": "Used with recurring scheduled broadcasts. Specifies the date of the next recurring broadcast in RFC3339 format if one or more specific broadcasts have been deleted in the series. Set to null otherwise."
        },
        {
          "parameter": "segment.category",
          "type": "object",
          "description": "The category for the scheduled broadcast. Set to null if no category has been specified."
        },
        {
          "parameter": "segment.category.id",
          "type": "string",
          "description": "Game/category ID."
        },
        {
          "parameter": "segment.category.name",
          "type": "string",
          "description": "Game/category name."
        },
        {
          "parameter": "segment.is_recurring",
          "type": "boolean",
          "description": "Indicates if the scheduled broadcast is recurring weekly."
        },
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "User ID of the broadcaster."
        },
        {
          "parameter": "broadcaster_name",
          "type": "string",
          "description": "Display name of the broadcaster."
        },
        {
          "parameter": "broadcaster_login",
          "type": "string",
          "description": "Login of the broadcaster."
        },
        {
          "parameter": "vacation",
          "type": "object",
          "description": "If Vacation Mode is enabled, this includes start and end dates for the vacation. If Vacation Mode is disabled, value is set to null."
        },
        {
          "parameter": "vacation.start_time",
          "type": "string",
          "description": "Start time for vacation specified in RFC3339 format."
        },
        {
          "parameter": "vacation.end_time",
          "type": "string",
          "description": "End time for vacation specified in RFC3339 format."
        }
      ]
    },
    {
      "title": "Get Channel iCalendar",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/schedule/icalendar"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "User ID of the broadcaster who owns the channel streaming schedule.. . Maximum: 1"
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": []
    },
    {
      "title": "Update Channel Stream Schedule",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "PATCH",
        "url": "https://api.twitch.tv/helix/schedule/settings"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "User ID of the broadcaster who owns the channel streaming schedule. Provided broadcaster_id must match the user_id in the user OAuth token.. . Maximum: 1"
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "is_vacation_enabled",
          "type": "boolean",
          "description": "Indicates if Vacation Mode is enabled. Set to true to add a vacation or false to remove vacation from the channel streaming schedule."
        },
        {
          "parameter": "vacation_start_time",
          "type": "string",
          "description": "Start time for vacation specified in RFC3339 format. Required if is_vacation_enabled is set to true."
        },
        {
          "parameter": "vacation_end_time",
          "type": "string",
          "description": "End time for vacation specified in RFC3339 format. Required if is_vacation_enabled is set to true."
        },
        {
          "parameter": "timezone",
          "type": "string",
          "description": "The timezone for when the vacation is being scheduled using the IANA time zone database format. Required if is_vacation_enabled is set to true."
        }
      ],
      "response_fields": []
    },
    {
      "title": "Create Channel Stream Schedule Segment",
      "authentication": "",
      "pagination_support": {
        "forward": true,
        "reverse": false
      },
      "url": {
        "method": "POST",
        "url": "https://api.twitch.tv/helix/schedule/segment"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "User ID of the broadcaster who owns the channel streaming schedule. Provided broadcaster_id must match the user_id in the user OAuth token.. . Maximum: 1"
        }
      ],
      "required_body_parameters": [
        {
          "parameter": "start_time",
          "type": "string",
          "description": "Start time for the scheduled broadcast specified in RFC3339 format."
        },
        {
          "parameter": "timezone",
          "type": "string",
          "description": "The timezone of the application creating the scheduled broadcast using the IANA time zone database format."
        },
        {
          "parameter": "is_recurring",
          "type": "boolean",
          "description": "Indicates if the scheduled broadcast is recurring weekly. To create a non-recurring segment, the broadcaster must be a partner or affiliate."
        }
      ],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "segments",
          "type": "array of objects",
          "description": "Scheduled broadcasts for this stream schedule."
        },
        {
          "parameter": "segment.id",
          "type": "string",
          "description": "The ID for the scheduled broadcast."
        },
        {
          "parameter": "segment.start_time",
          "type": "string",
          "description": "Scheduled start time for the scheduled broadcast in RFC3339 format."
        },
        {
          "parameter": "segment.end_time",
          "type": "string",
          "description": "Scheduled end time for the scheduled broadcast in RFC3339 format."
        },
        {
          "parameter": "segment.title",
          "type": "string",
          "description": "Title for the scheduled broadcast."
        },
        {
          "parameter": "segment.canceled_until",
          "type": "string",
          "description": "Used with recurring scheduled broadcasts. Specifies the date of the next recurring broadcast in RFC3339 format if one or more specific broadcasts have been deleted in the series. Set to null otherwise."
        },
        {
          "parameter": "segment.category",
          "type": "object",
          "description": "The category for the scheduled broadcast. Set to null if no category has been specified."
        },
        {
          "parameter": "segment.category.id",
          "type": "string",
          "description": "Game/category ID."
        },
        {
          "parameter": "segment.category.name",
          "type": "string",
          "description": "Game/category name."
        },
        {
          "parameter": "segment.is_recurring",
          "type": "boolean",
          "description": "Indicates if the scheduled broadcast is recurring weekly."
        },
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "User ID of the broadcaster."
        },
        {
          "parameter": "broadcaster_name",
          "type": "string",
          "description": "Display name of the broadcaster."
        },
        {
          "parameter": "broadcaster_login",
          "type": "string",
          "description": "Login of the broadcaster."
        },
        {
          "parameter": "vacation",
          "type": "object",
          "description": "If Vacation Mode is enabled, this includes start and end dates for the vacation. If Vacation Mode is disabled, value is set to null."
        },
        {
          "parameter": "vacation.start_time",
          "type": "string",
          "description": "Start time for vacation specified in RFC3339 format."
        },
        {
          "parameter": "vacation.end_time",
          "type": "string",
          "description": "End time for vacation specified in RFC3339 format."
        }
      ]
    },
    {
      "title": "Update Channel Stream Schedule Segment",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "PATCH",
        "url": "https://api.twitch.tv/helix/schedule/segment"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "User ID of the broadcaster who owns the channel streaming schedule. Provided broadcaster_id must match the user_id in the user OAuth token.. . Maximum: 1"
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "The ID of the streaming segment to update.. . Maximum: 1"
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "segments",
          "type": "array of objects",
          "description": "Scheduled events for this stream schedule."
        },
        {
          "parameter": "segment.id",
          "type": "string",
          "description": "The ID for the scheduled event."
        },
        {
          "parameter": "segment.start_time",
          "type": "string",
          "description": "Scheduled start time for the scheduled event in RFC3339 format."
        },
        {
          "parameter": "segment.end_time",
          "type": "string",
          "description": "Scheduled end time for the scheduled event in RFC3339 format."
        },
        {
          "parameter": "segment.title",
          "type": "string",
          "description": "Title for the scheduled event."
        },
        {
          "parameter": "segment.canceled_until",
          "type": "string",
          "description": "Used with recurring scheduled events. Specifies the date of the next recurring event in RFC3339 format if one or more specific events have been deleted in the series. Set to null otherwise."
        },
        {
          "parameter": "segment.category",
          "type": "object",
          "description": "The category for the scheduled broadcast. Set to null if no category has been specified."
        },
        {
          "parameter": "segment.category.id",
          "type": "string",
          "description": "Game/category ID."
        },
        {
          "parameter": "segment.category.name",
          "type": "string",
          "description": "Game/category name."
        },
        {
          "parameter": "segment.is_recurring",
          "type": "boolean",
          "description": "Indicates if the scheduled event is recurring."
        },
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "User ID of the broadcaster."
        },
        {
          "parameter": "broadcaster_name",
          "type": "string",
          "description": "Display name of the broadcaster."
        },
        {
          "parameter": "broadcaster_login",
          "type": "string",
          "description": "Login of the broadcaster."
        },
        {
          "parameter": "vacation",
          "type": "object",
          "description": "If Vacation Mode is enabled, this includes start and end dates for the vacation. If Vacation Mode is disabled, value is set to null."
        },
        {
          "parameter": "vacation.start_time",
          "type": "string",
          "description": "Start time for vacation specified in RFC3339 format."
        },
        {
          "parameter": "vacation.end_time",
          "type": "string",
          "description": "End time for vacation specified in RFC3339 format."
        }
      ]
    },
    {
      "title": "Delete Channel Stream Schedule Segment",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "DELETE",
        "url": "https://api.twitch.tv/helix/schedule/segment"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "User ID of the broadcaster who owns the channel streaming schedule. Provided broadcaster_id must match the user_id in the user OAuth token.. . Maximum: 1"
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "The ID of the streaming segment to delete."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": []
    },
    {
      "title": "Search Categories",
      "authentication": "",
      "pagination_support": {
        "forward": true,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/search/categories"
      },
      "required_query_parameters": [
        {
          "parameter": "query",
          "type": "string",
          "description": "URl encoded search query"
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "first",
          "type": "integer",
          "description": "Maximum number of objects to return.. Maximum: 100.. Default: 20."
        },
        {
          "parameter": "after",
          "type": "string",
          "description": "Cursor for forward pagination: tells the server where to start fetching the next set of results, in a multi-page response. The cursor value specified here is from the pagination response field of a prior query."
        }
      ],
      "response_fields": [
        {
          "parameter": "box_art_url",
          "type": "string",
          "description": "Template URL for the game’s box art."
        },
        {
          "parameter": "name",
          "type": "string",
          "description": "Game/category name."
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "Game/category ID."
        }
      ]
    },
    {
      "title": "Search Channels",
      "authentication": "",
      "pagination_support": {
        "forward": true,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "helix/search/channels"
      },
      "required_query_parameters": [
        {
          "parameter": "query",
          "type": "string",
          "description": "URl encoded search query"
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "first",
          "type": "integer",
          "description": "Maximum number of objects to return.. Maximum: 100. Default: 20"
        },
        {
          "parameter": "after",
          "type": "string",
          "description": "Cursor for forward pagination: tells the server where to start fetching the next set of results, in a multi-page response. The cursor value specified here is from the pagination response field of a prior query."
        },
        {
          "parameter": "live_only",
          "type": "Boolean",
          "description": "Filter results for live streams only.. Default: false"
        }
      ],
      "response_fields": [
        {
          "parameter": "broadcaster_language",
          "type": "string",
          "description": "Channel language. (Broadcaster Language field from the Channels service). A language value is either the ISO 639-1 two-letter code for a supported stream language or “other”."
        },
        {
          "parameter": "broadcaster_login",
          "type": "string",
          "description": "Login of the broadcaster."
        },
        {
          "parameter": "display_name",
          "type": "string",
          "description": "Display name of the broadcaster."
        },
        {
          "parameter": "game_id",
          "type": "string",
          "description": "ID of the game being played on the stream."
        },
        {
          "parameter": "game_name",
          "type": "string",
          "description": "Name of the game being played on the stream."
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "Channel ID."
        },
        {
          "parameter": "is_live",
          "type": "Boolean",
          "description": "Indicates if the channel is currenty live."
        },
        {
          "parameter": "tag_ids",
          "type": "string[]",
          "description": "Tag IDs that apply to the stream. This array only contains strings when a channel is live. For all possibilities, see List of All Tags. Category Tags are not returned."
        },
        {
          "parameter": "thumbnail_url",
          "type": "string",
          "description": "A URL to a thumbnail of the channel’s profile image."
        },
        {
          "parameter": "title",
          "type": "string",
          "description": "Stream title."
        },
        {
          "parameter": "started_at",
          "type": "string",
          "description": "UTC timestamp. Returns an empty string if the channel is not live."
        }
      ]
    },
    {
      "title": "Get Soundtrack Current Track",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/soundtrack/current_track"
      },
      "required_query_parameters": [
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "The ID of the broadcaster that’s playing a Soundtrack track."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": []
    },
    {
      "title": "Get Soundtrack Playlist",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/soundtrack/playlist"
      },
      "required_query_parameters": [
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "The ID of the Soundtrack playlist to get."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "\n      ",
          "type": "Integer",
          "description": "The maximum number of tracks to return for this playlist in the response. The minimum number of tracks is 1 and the maximum is 50. The default is 20."
        },
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "The cursor used to get the next page of tracks for this playlist. The Pagination object in the response contains the cursor’s value."
        }
      ],
      "response_fields": []
    },
    {
      "title": "Get Soundtrack Playlists",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/soundtrack/playlists"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "The ID of the Soundtrack playlist to get. Specify an ID only if you want to get a single playlist instead of all playlists."
        },
        {
          "parameter": "\n      ",
          "type": "Integer",
          "description": "The maximum number of items to return per page in the response. The minimum page size is 1 item per page and the maximum is 50 items per page. The default is 20."
        },
        {
          "parameter": "\n      ",
          "type": "String",
          "description": "The cursor used to get the next page of results. The Pagination object in the response contains the cursor’s value. Read more."
        }
      ],
      "response_fields": []
    },
    {
      "title": "Get Stream Key",
      "authentication": "channel:read:stream_key",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "",
        "url": "https://api.twitch.tv/helix/streams/key"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "User ID of the broadcaster"
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": []
    },
    {
      "title": "Get Streams",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/streams"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "after",
          "type": "string",
          "description": "Cursor for forward pagination: tells the server where to start fetching the next set of results, in a multi-page response. The cursor value specified here is from the pagination response field of a prior query."
        },
        {
          "parameter": "before",
          "type": "string",
          "description": "Cursor for backward pagination: tells the server where to start fetching the next set of results, in a multi-page response. The cursor value specified here is from the pagination response field of a prior query."
        },
        {
          "parameter": "first",
          "type": "integer",
          "description": "Maximum number of objects to return. Maximum: 100. Default: 20."
        },
        {
          "parameter": "game_id",
          "type": "string",
          "description": "Returns streams broadcasting a specified game ID. You can specify up to 100 IDs."
        },
        {
          "parameter": "language",
          "type": "string",
          "description": "Stream language. You can specify up to 100 languages. A language value must be either the ISO 639-1 two-letter code for a supported stream language or “other”."
        },
        {
          "parameter": "user_id",
          "type": "string",
          "description": "Returns streams broadcast by one or more specified user IDs. You can specify up to 100 IDs."
        },
        {
          "parameter": "user_login",
          "type": "string",
          "description": "Returns streams broadcast by one or more specified user login names. You can specify up to 100 names."
        }
      ],
      "response_fields": [
        {
          "parameter": "id",
          "type": "string",
          "description": "Stream ID."
        },
        {
          "parameter": "user_id",
          "type": "string",
          "description": "ID of the user who is streaming."
        },
        {
          "parameter": "user_login",
          "type": "string",
          "description": "Login of the user who is streaming."
        },
        {
          "parameter": "user_name",
          "type": "string",
          "description": "Display name corresponding to user_id."
        },
        {
          "parameter": "game_id",
          "type": "string",
          "description": "ID of the game being played on the stream."
        },
        {
          "parameter": "game_name",
          "type": "string",
          "description": "Name of the game being played."
        },
        {
          "parameter": "type",
          "type": "string",
          "description": "Stream type: \"live\" or \"\" (in case of error)."
        },
        {
          "parameter": "title",
          "type": "string",
          "description": "Stream title."
        },
        {
          "parameter": "viewer_count",
          "type": "int",
          "description": "Number of viewers watching the stream at the time of the query."
        },
        {
          "parameter": "started_at",
          "type": "string",
          "description": "UTC timestamp."
        },
        {
          "parameter": "language",
          "type": "string",
          "description": "Stream language. A language value is either the ISO 639-1 two-letter code for a supported stream language or “other”."
        },
        {
          "parameter": "thumbnail_url",
          "type": "string",
          "description": "Thumbnail URL of the stream. All image URLs have variable width and height. You can replace {width} and {height} with any values to get that size image"
        },
        {
          "parameter": "tag_ids",
          "type": "string",
          "description": "Shows tag IDs that apply to the stream."
        },
        {
          "parameter": "is_mature",
          "type": "boolean",
          "description": "Indicates if the broadcaster has specified their channel contains mature content that may be inappropriate for younger audiences."
        },
        {
          "parameter": "pagination",
          "type": "object containing a string",
          "description": "A cursor value, to be used in a subsequent request to specify the starting point of the next set of results."
        }
      ]
    },
    {
      "title": "Get Followed Streams",
      "authentication": "user:read:follows",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/streams/followed"
      },
      "required_query_parameters": [
        {
          "parameter": "user_id",
          "type": "string",
          "description": "Results will only include active streams from the channels that this Twitch user follows. user_id must match the User ID in the bearer token."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "after",
          "type": "string",
          "description": "Cursor for forward pagination: tells the server where to start fetching the next set of results, in a multi-page response. The cursor value specified here is from the pagination response field of a prior query."
        },
        {
          "parameter": "first",
          "type": "integer",
          "description": "Maximum number of objects to return. Maximum: 100. Default: 100."
        }
      ],
      "response_fields": [
        {
          "parameter": "game_id",
          "type": "string",
          "description": "ID of the game being played on the stream."
        },
        {
          "parameter": "game_name",
          "type": "string",
          "description": "Name of the game being played."
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "Stream ID."
        },
        {
          "parameter": "language",
          "type": "string",
          "description": "Stream language. A language value is either the ISO 639-1 two-letter code for a supported stream language or “other”."
        },
        {
          "parameter": "pagination",
          "type": "object containing a string",
          "description": "A cursor value, to be used in a subsequent request to specify the starting point of the next set of results."
        },
        {
          "parameter": "started_at",
          "type": "string",
          "description": "UTC timestamp."
        },
        {
          "parameter": "tag_ids",
          "type": "string",
          "description": "Shows tag IDs that apply to the stream."
        },
        {
          "parameter": "thumbnail_url",
          "type": "string",
          "description": "Thumbnail URL of the stream. All image URLs have variable width and height. You can replace {width} and {height} with any values to get that size image"
        },
        {
          "parameter": "title",
          "type": "string",
          "description": "Stream title."
        },
        {
          "parameter": "type",
          "type": "string",
          "description": "Stream type: \"live\" or \"\" (in case of error)."
        },
        {
          "parameter": "user_id",
          "type": "string",
          "description": "ID of the user who is streaming."
        },
        {
          "parameter": "user_login",
          "type": "string",
          "description": "Login of the user who is streaming."
        },
        {
          "parameter": "user_name",
          "type": "string",
          "description": "Display name corresponding to user_id."
        },
        {
          "parameter": "viewer_count",
          "type": "int",
          "description": "Number of viewers watching the stream at the time of the query."
        }
      ]
    },
    {
      "title": "Create Stream Marker",
      "authentication": "channel:manage:broadcast",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "POST",
        "url": "https://api.twitch.tv/helix/streams/markers"
      },
      "required_query_parameters": [],
      "required_body_parameters": [
        {
          "parameter": "user_id",
          "type": "string",
          "description": "ID of the broadcaster in whose live stream the marker is created."
        }
      ],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "created_at",
          "type": "string",
          "description": "RFC3339 timestamp of the marker."
        },
        {
          "parameter": "description",
          "type": "string",
          "description": "Description of the marker."
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "Unique ID of the marker."
        },
        {
          "parameter": "position_seconds",
          "type": "integer",
          "description": "Relative offset (in seconds) of the marker, from the beginning of the stream."
        }
      ]
    },
    {
      "title": "Get Stream Markers",
      "authentication": "user:read:broadcast",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/streams/markers"
      },
      "required_query_parameters": [
        {
          "parameter": "user_id",
          "type": "string",
          "description": "ID of the broadcaster from whose stream markers are returned."
        },
        {
          "parameter": "video_id",
          "type": "string",
          "description": "ID of the VOD/video whose stream markers are returned."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "after",
          "type": "string",
          "description": "Cursor for forward pagination: tells the server where to start fetching the next set of results, in a multi-page response. The cursor value specified here is from the pagination response field of a prior query."
        },
        {
          "parameter": "before",
          "type": "string",
          "description": "Cursor for backward pagination: tells the server where to start fetching the next set of results, in a multi-page response. The cursor value specified here is from the pagination response field of a prior query."
        },
        {
          "parameter": "first",
          "type": "string",
          "description": "Number of values to be returned when getting videos by user or game ID. Limit: 100. Default: 20."
        }
      ],
      "response_fields": [
        {
          "parameter": "id",
          "type": "string",
          "description": "ID of the marker."
        },
        {
          "parameter": "created_at",
          "type": "string",
          "description": "RFC3339 timestamp of the marker."
        },
        {
          "parameter": "description",
          "type": "string",
          "description": "Description of the marker."
        },
        {
          "parameter": "pagination",
          "type": "object containing a string",
          "description": "A cursor value, to be used in a subsequent request to specify the starting point of the next set of results. If this is empty, you are at the last page."
        },
        {
          "parameter": "position_seconds",
          "type": "integer",
          "description": "Relative offset (in seconds) of the marker, from the beginning of the stream."
        },
        {
          "parameter": "URL",
          "type": "string",
          "description": "A link to the stream with a query parameter that is a timestamp of the marker's location."
        },
        {
          "parameter": "user_id",
          "type": "string",
          "description": "ID of the user whose markers are returned."
        },
        {
          "parameter": "user_name",
          "type": "string",
          "description": "Display name corresponding to user_id."
        },
        {
          "parameter": "user_login",
          "type": "string",
          "description": "Login corresponding to user_id."
        },
        {
          "parameter": "video_id",
          "type": "string",
          "description": "ID of the stream (VOD/video) that was marked."
        }
      ]
    },
    {
      "title": "Get Broadcaster Subscriptions",
      "authentication": "channel:read:subscriptions",
      "pagination_support": {
        "forward": true,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/subscriptions"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "User ID of the broadcaster. Must match the User ID in the Bearer token."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "User ID of the broadcaster."
        },
        {
          "parameter": "broadcaster_login",
          "type": "string",
          "description": "Login of the broadcaster."
        },
        {
          "parameter": "broadcaster_name",
          "type": "string",
          "description": "Display name of the broadcaster."
        },
        {
          "parameter": "gifter_id",
          "type": "string",
          "description": "If the subscription was gifted, this is the user ID of the gifter. Empty string otherwise."
        },
        {
          "parameter": "gifter_login",
          "type": "string",
          "description": "If the subscription was gifted, this is the login of the gifter. Empty string otherwise."
        },
        {
          "parameter": "gifter_name",
          "type": "string",
          "description": "If the subscription was gifted, this is the display name of the gifter. Empty string otherwise."
        },
        {
          "parameter": "is_gift",
          "type": "Boolean",
          "description": "Is true if the subscription is a gift subscription."
        },
        {
          "parameter": "plan_name",
          "type": "string",
          "description": "Name of the subscription."
        },
        {
          "parameter": "tier",
          "type": "string",
          "description": "Type of subscription (Tier 1, Tier 2, Tier 3).. 1000 = Tier 1, 2000 = Tier 2, 3000 = Tier 3 subscriptions."
        },
        {
          "parameter": "user_id",
          "type": "string",
          "description": "ID of the subscribed user."
        },
        {
          "parameter": "user_name",
          "type": "string",
          "description": "Display name of the subscribed user."
        },
        {
          "parameter": "user_login",
          "type": "string",
          "description": "Login of the subscribed user."
        },
        {
          "parameter": "pagination",
          "type": "object containing a string",
          "description": "A cursor value,  to be used in a subsequent request to specify the starting point  of the next set of results. If this is empty, you are at the last page."
        },
        {
          "parameter": "total",
          "type": "integer",
          "description": "The total number of users that subscribe to this broadcaster."
        },
        {
          "parameter": "points",
          "type": "integer",
          "description": "The current number of subscriber points earned by this broadcaster. Points are based on the subscription tier of each user that subscribes to this broadcaster. For example, a Tier 1 subscription is worth 1 point, Tier 2 is worth 2 points, and Tier 3 is worth 6 points. The number of points determines the number of emote slots that are unlocked for the broadcaster (see Subscriber Emote Slots)."
        }
      ]
    },
    {
      "title": "Check User Subscription",
      "authentication": "user:read:subscriptions",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/subscriptions/user"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "User ID of an Affiliate or Partner broadcaster."
        },
        {
          "parameter": "user_id",
          "type": "string",
          "description": "User ID of a Twitch viewer."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "User ID of the broadcaster."
        },
        {
          "parameter": "broadcaster_login",
          "type": "string",
          "description": "Login of the broadcaster."
        },
        {
          "parameter": "broadcaster_name",
          "type": "string",
          "description": "Display name of the broadcaster."
        },
        {
          "parameter": "is_gift",
          "type": "boolean",
          "description": "Indicates if the subscription is a gift."
        },
        {
          "parameter": "gifter_id",
          "type": "string",
          "description": "The ID of the user that gifted the subscription to the user. The object includes this field only if is_gift is true."
        },
        {
          "parameter": "gifter_login",
          "type": "string",
          "description": "The gifter’s login name. The object includes this field only if is_gift is true."
        },
        {
          "parameter": "gifter_name",
          "type": "string",
          "description": "The gifter’s display name. The object includes this field only if is_gift is true."
        },
        {
          "parameter": "tier",
          "type": "string",
          "description": "Subscription tier. 1000 is tier 1, 2000 is tier 2, and 3000 is tier 3."
        }
      ]
    },
    {
      "title": "Get All Stream Tags",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/tags/streams"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "after",
          "type": "string",
          "description": "The cursor used to get the next page of results. The pagination object in the response contains the cursor’s value.. . The after and tag_id query parameters are mutually exclusive."
        },
        {
          "parameter": "first",
          "type": "integer",
          "description": "The maximum number of tags to return per page.. . Maximum: 100. Default: 20."
        },
        {
          "parameter": "tag_id",
          "type": "string",
          "description": "An ID that identifies a specific tag to return. Include the query parameter for each tag you want returned. For example, tag_id=123&amp;tag_id=456. You may specify a maximum of 100 IDs."
        }
      ],
      "response_fields": [
        {
          "parameter": "data",
          "type": "object array",
          "description": "An array of tag objects."
        },
        {
          "parameter": "tag_id",
          "type": "string",
          "description": "An ID that identifies the tag."
        },
        {
          "parameter": "is_auto",
          "type": "Boolean",
          "description": "A Boolean value that determines whether the tag is an automatic tag. An automatic tag is one that Twitch adds to the stream. You cannot add or remove automatic tags. The value is true if the tag is an automatic tag; otherwise, false."
        },
        {
          "parameter": "localization_names",
          "type": "map[string,string]",
          "description": "A dictionary that contains the localized names of the tag. The key is in the form, &lt;locale&gt;-&lt;coutry/region&gt;. For example, us-en. The value is the localized name."
        },
        {
          "parameter": "localization_descriptions",
          "type": "map[string,string]",
          "description": "A dictionary that contains the localized descriptions of the tag. The key is in the form, &lt;locale&gt;-&lt;coutry/region&gt;. For example, us-en. The value is the localized description."
        },
        {
          "parameter": "pagination",
          "type": "object",
          "description": "An object that contains the cursor used to get the next page of tags."
        },
        {
          "parameter": "cursor",
          "type": "string",
          "description": "The cursor value that you set the after query parameter to."
        }
      ]
    },
    {
      "title": "Get Stream Tags",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/streams/tags"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "The user ID of the channel to get the tags from."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "data",
          "type": "object array",
          "description": "An array of tag objects."
        },
        {
          "parameter": "tag_id",
          "type": "string",
          "description": "An ID that identifies the tag."
        },
        {
          "parameter": "is_auto",
          "type": "Boolean",
          "description": "A Boolean value that determines whether the tag is an automatic tag. An automatic tag is one that Twitch adds to the stream. You cannot add or remove automatic tags. The value is true if the tag is an automatic tag; otherwise, false."
        },
        {
          "parameter": "localization_names",
          "type": "map[string,string]",
          "description": "A dictionary that contains the localized names of the tag. The key is in the form, &lt;locale&gt;-&lt;coutry/region&gt;. For example, us-en. The value is the localized name."
        },
        {
          "parameter": "localization_descriptions",
          "type": "map[string,string]",
          "description": "A dictionary that contains the localized descriptions of the tag. The key is in the form, &lt;locale&gt;-&lt;coutry/region&gt;. For example, us-en. The value is the localized description."
        },
        {
          "parameter": "pagination",
          "type": "object",
          "description": "An object that contains the cursor used to get the next page of tags."
        },
        {
          "parameter": "cursor",
          "type": "string",
          "description": "The cursor value that you set the after query parameter to."
        }
      ]
    },
    {
      "title": "Replace Stream Tags",
      "authentication": "channel:manage:broadcast",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "PUT",
        "url": "https://api.twitch.tv/helix/streams/tags"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "The user ID of the channel to apply the tags to."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": []
    },
    {
      "title": "Get Channel Teams",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/teams/channel"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "User ID for a Twitch user."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "User ID of the broadcaster."
        },
        {
          "parameter": "broadcaster_login",
          "type": "string",
          "description": "Login of the broadcaster."
        },
        {
          "parameter": "broadcaster_name",
          "type": "string",
          "description": "Display name of the broadcaster."
        },
        {
          "parameter": "background_image_url",
          "type": "string",
          "description": "URL for the Team background image."
        },
        {
          "parameter": "banner",
          "type": "string",
          "description": "URL for the Team banner."
        },
        {
          "parameter": "created_at",
          "type": "string",
          "description": "Date and time the Team was created."
        },
        {
          "parameter": "updated_at",
          "type": "string",
          "description": "Date and time the Team was last updated."
        },
        {
          "parameter": "info",
          "type": "string",
          "description": "Team description."
        },
        {
          "parameter": "thumbnail_url",
          "type": "string",
          "description": "Image URL for the Team logo."
        },
        {
          "parameter": "team_name",
          "type": "string",
          "description": "Team name."
        },
        {
          "parameter": "team_display_name",
          "type": "string",
          "description": "Team display name."
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "Team ID."
        }
      ]
    },
    {
      "title": "Get Teams",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/teams"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "name",
          "type": "string",
          "description": "Team name."
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "Team ID."
        }
      ],
      "response_fields": [
        {
          "parameter": "users",
          "type": "Array of user objects",
          "description": "Users in the specified Team."
        },
        {
          "parameter": "users.user_id",
          "type": "string",
          "description": "User ID of a Team member."
        },
        {
          "parameter": "users.user_login",
          "type": "string",
          "description": "Login of a Team member."
        },
        {
          "parameter": "users.user_name",
          "type": "string",
          "description": "Display name of a Team member."
        },
        {
          "parameter": "background_image_url",
          "type": "string",
          "description": "URL of the Team background image."
        },
        {
          "parameter": "banner",
          "type": "string",
          "description": "URL for the Team banner."
        },
        {
          "parameter": "created_at",
          "type": "string",
          "description": "Date and time the Team was created."
        },
        {
          "parameter": "updated_at",
          "type": "string",
          "description": "Date and time the Team was last updated."
        },
        {
          "parameter": "info",
          "type": "string",
          "description": "Team description."
        },
        {
          "parameter": "thumbnail_url",
          "type": "string",
          "description": "Image URL for the Team logo."
        },
        {
          "parameter": "team_name",
          "type": "string",
          "description": "Team name."
        },
        {
          "parameter": "team_display_name",
          "type": "string",
          "description": "Team display name."
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "Team ID."
        }
      ]
    },
    {
      "title": "Get Users",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/users"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "id",
          "type": "string",
          "description": "User ID. Multiple user IDs can be specified. Limit: 100."
        },
        {
          "parameter": "login",
          "type": "string",
          "description": "User login name. Multiple login names can be specified. Limit: 100."
        }
      ],
      "response_fields": [
        {
          "parameter": "broadcaster_type",
          "type": "string",
          "description": "User’s broadcaster type: \"partner\", \"affiliate\", or \"\"."
        },
        {
          "parameter": "description",
          "type": "string",
          "description": "User’s channel description."
        },
        {
          "parameter": "display_name",
          "type": "string",
          "description": "User’s display name."
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "User’s ID."
        },
        {
          "parameter": "login",
          "type": "string",
          "description": "User’s login name."
        },
        {
          "parameter": "offline_image_url",
          "type": "string",
          "description": "URL of the user’s offline image."
        },
        {
          "parameter": "profile_image_url",
          "type": "string",
          "description": "URL of the user’s profile image."
        },
        {
          "parameter": "type",
          "type": "string",
          "description": "User’s type: \"staff\", \"admin\", \"global_mod\", or \"\"."
        },
        {
          "parameter": "view_count",
          "type": "integer",
          "description": "Total number of views of the user’s channel.. . NOTE: This field has been deprecated. For information, see Get Users API endpoint – “view_count” deprecation. The response continues to include the field; however, it contains stale data. You should stop displaying this data at your earliest convenience."
        },
        {
          "parameter": "email",
          "type": "string",
          "description": "User’s verified email address. Returned if the request includes the user:read:email scope."
        },
        {
          "parameter": "created_at",
          "type": "string",
          "description": "Date when the user was created."
        }
      ]
    },
    {
      "title": "Update User",
      "authentication": "user:edit",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "PUT",
        "url": "https://api.twitch.tv/helix/users?description=&lt;description&gt;"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "\n      ",
          "type": "string",
          "description": "User’s account description"
        }
      ],
      "response_fields": []
    },
    {
      "title": "Get Users Follows",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/users/follows?from_id=&lt;user"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "followed_at",
          "type": "string",
          "description": "Date and time when the from_id user followed the to_id user."
        },
        {
          "parameter": "from_id",
          "type": "string",
          "description": "ID of the user following the to_id user."
        },
        {
          "parameter": "from_login",
          "type": "string",
          "description": "Login of the user following the to_id user."
        },
        {
          "parameter": "from_name",
          "type": "string",
          "description": "Display name corresponding to from_id."
        },
        {
          "parameter": "pagination",
          "type": "object containing a string",
          "description": "A cursor value, to be used in a subsequent request to specify the starting point of the next set of results."
        },
        {
          "parameter": "to_id",
          "type": "string",
          "description": "ID of the user being followed by the from_id user."
        },
        {
          "parameter": "to_login",
          "type": "string",
          "description": "Login of the user being followed by the from_id user."
        },
        {
          "parameter": "to_name",
          "type": "string",
          "description": "Display name corresponding to to_id."
        },
        {
          "parameter": "total",
          "type": "int",
          "description": "Total number of items returned.If only from_id was in the request, this is the total number of followed users.If only to_id was in the request, this is the total number of followers.If both from_id and to_id were in the request, this is 1 (if the \"from\" user follows the \"to\" user) or 0."
        }
      ]
    },
    {
      "title": "Get User Block List",
      "authentication": "user:read:blocked_users",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/users/blocks"
      },
      "required_query_parameters": [
        {
          "parameter": "broadcaster_id",
          "type": "string",
          "description": "User ID for a Twitch user."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "first",
          "type": "integer",
          "description": "Maximum number of objects to return. Maximum: 100. Default: 20."
        },
        {
          "parameter": "after",
          "type": "string",
          "description": "Cursor for forward pagination: tells the server where to start fetching the next set of results, in a multi-page response. The cursor value specified here is from the pagination response field of a prior query."
        }
      ],
      "response_fields": [
        {
          "parameter": "user_id",
          "type": "string",
          "description": "User ID of the blocked user."
        },
        {
          "parameter": "user_login",
          "type": "string",
          "description": "Login of the blocked user."
        },
        {
          "parameter": "display_name",
          "type": "string",
          "description": "Display name of the blocked user."
        }
      ]
    },
    {
      "title": "Block User",
      "authentication": "user:manage:blocked_users",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "PUT",
        "url": "https://api.twitch.tv/helix/users/blocks"
      },
      "required_query_parameters": [
        {
          "parameter": "target_user_id",
          "type": "string",
          "description": "User ID of the user to be blocked."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "source_context",
          "type": "string",
          "description": "Source context for blocking the user. Valid values: \"chat\", \"whisper\"."
        },
        {
          "parameter": "reason",
          "type": "string",
          "description": "Reason for blocking the user. Valid values: \"spam\", \"harassment\", or \"other\"."
        }
      ],
      "response_fields": []
    },
    {
      "title": "Unblock User",
      "authentication": "user:manage:blocked_users",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "DELETE",
        "url": "https://api.twitch.tv/helix/users/blocks"
      },
      "required_query_parameters": [
        {
          "parameter": "target_user_id",
          "type": "string",
          "description": "User ID of the user to be unblocked."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": []
    },
    {
      "title": "Get User Extensions",
      "authentication": "user:read:broadcast",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/users/extensions/list"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "can_activate",
          "type": "boolean",
          "description": "Indicates whether the extension is configured such that it can be activated."
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "ID of the extension."
        },
        {
          "parameter": "name",
          "type": "string",
          "description": "Name of the extension."
        },
        {
          "parameter": "type",
          "type": "string array",
          "description": "Types for which the extension can be activated. Valid values: \"component\", \"mobile\", \"panel\", \"overlay\"."
        },
        {
          "parameter": "version",
          "type": "string",
          "description": "Version of the extension."
        }
      ]
    },
    {
      "title": "Get User Active Extensions",
      "authentication": "user:read:broadcast",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/users/extensions"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "active",
          "type": "boolean",
          "description": "Activation state of the extension, for each extension type (component, overlay, mobile, panel). If false, no other data is provided."
        },
        {
          "parameter": "component",
          "type": "map",
          "description": "Contains data for video-component Extensions."
        },
        {
          "parameter": "id",
          "type": "string",
          "description": "ID of the extension."
        },
        {
          "parameter": "name",
          "type": "string",
          "description": "Name of the extension."
        },
        {
          "parameter": "overlay",
          "type": "map",
          "description": "Contains data for video-overlay Extensions."
        },
        {
          "parameter": "panel",
          "type": "map",
          "description": "Contains data for panel Extensions."
        },
        {
          "parameter": "version",
          "type": "string",
          "description": "Version of the extension."
        },
        {
          "parameter": "x",
          "type": "int",
          "description": "(Video-component Extensions only) X-coordinate of the placement of the extension."
        },
        {
          "parameter": "y",
          "type": "int",
          "description": "(Video-component Extensions only) Y-coordinate of the placement of the extension."
        }
      ]
    },
    {
      "title": "Update User Extensions",
      "authentication": "user:edit:broadcast",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "PUT",
        "url": "https://api.twitch.tv/helix/users/extensions"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": []
    },
    {
      "title": "Get Videos",
      "authentication": "",
      "pagination_support": {
        "forward": true,
        "reverse": false
      },
      "url": {
        "method": "GET",
        "url": "https://api.twitch.tv/helix/videos"
      },
      "required_query_parameters": [
        {
          "parameter": "id",
          "type": "string",
          "description": "ID of the video being queried. Limit: 100. If this is specified, you cannot use any of the optional query parameters below."
        },
        {
          "parameter": "user_id",
          "type": "string",
          "description": "ID of the user who owns the video. Limit 1."
        },
        {
          "parameter": "game_id",
          "type": "string",
          "description": "ID of the game the video is of. Limit 1."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [
        {
          "parameter": "after",
          "type": "string",
          "description": "Cursor for forward pagination: tells the server where to start fetching the next set of results, in a multi-page response. The cursor value specified here is from the pagination response field of a prior query."
        },
        {
          "parameter": "before",
          "type": "string",
          "description": "Cursor for backward pagination: tells the server where to start fetching the next set of results, in a multi-page response. The cursor value specified here is from the pagination response field of a prior query."
        },
        {
          "parameter": "first",
          "type": "string",
          "description": "Number of values to be returned when getting videos by user or game ID. Limit: 100. Default: 20."
        },
        {
          "parameter": "language",
          "type": "string",
          "description": "Language of the video being queried. Limit: 1. A language value must be either the ISO 639-1 two-letter code for a supported stream language or “other”."
        },
        {
          "parameter": "period",
          "type": "string",
          "description": "Period during which the video was created. Valid values: \"all\", \"day\", \"week\", \"month\". Default: \"all\"."
        },
        {
          "parameter": "sort",
          "type": "string",
          "description": "Sort order of the videos. Valid values: \"time\", \"trending\", \"views\". Default: \"time\"."
        },
        {
          "parameter": "type",
          "type": "string",
          "description": "Type of video. Valid values: \"all\", \"upload\", \"archive\", \"highlight\". Default: \"all\"."
        }
      ],
      "response_fields": [
        {
          "parameter": "id",
          "type": "string",
          "description": "ID of the video."
        },
        {
          "parameter": "stream_id",
          "type": "string",
          "description": "ID of the stream that the video originated from if the type is \"archive\". Otherwise set to null."
        },
        {
          "parameter": "user_id",
          "type": "string",
          "description": "ID of the user who owns the video."
        },
        {
          "parameter": "user_login",
          "type": "string",
          "description": "Login of the user who owns the video."
        },
        {
          "parameter": "user_name",
          "type": "string",
          "description": "Display name corresponding to user_id."
        },
        {
          "parameter": "title",
          "type": "string",
          "description": "Title of the video."
        },
        {
          "parameter": "description",
          "type": "string",
          "description": "Description of the video."
        },
        {
          "parameter": "created_at",
          "type": "string",
          "description": "Date when the video was created."
        },
        {
          "parameter": "published_at",
          "type": "string",
          "description": "Date when the video was published."
        },
        {
          "parameter": "url",
          "type": "object",
          "description": "URL of the video."
        },
        {
          "parameter": "thumbnail_url",
          "type": "object",
          "description": "Template URL for the thumbnail of the video."
        },
        {
          "parameter": "viewable",
          "type": "string",
          "description": "Indicates whether the video is publicly viewable. Valid values: \"public\", \"private\"."
        },
        {
          "parameter": "view_count",
          "type": "int",
          "description": "Number of times the video has been viewed."
        },
        {
          "parameter": "language",
          "type": "string",
          "description": "Language of the video. A language value is either the ISO 639-1 two-letter code for a supported stream language or “other”."
        },
        {
          "parameter": "type",
          "type": "string",
          "description": "Type of video. Valid values: \"upload\", \"archive\", \"highlight\"."
        },
        {
          "parameter": "duration",
          "type": "string",
          "description": "Length of the video."
        },
        {
          "parameter": "muted_segments",
          "type": "object[]",
          "description": "Array of muted segments in the video. If there are no muted segments, the value will be null."
        },
        {
          "parameter": "segment.duration",
          "type": "integer",
          "description": "Duration of the muted segment."
        },
        {
          "parameter": "segment.offset",
          "type": "integer",
          "description": "Offset in the video at which the muted segment begins."
        },
        {
          "parameter": "pagination",
          "type": "object containing a string",
          "description": "A cursor value, to be used in a subsequent request to specify the starting point of the next set of results."
        }
      ]
    },
    {
      "title": "Delete Videos",
      "authentication": "channel:manage:videos",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "DELETE",
        "url": "https://api.twitch.tv/helix/videos"
      },
      "required_query_parameters": [
        {
          "parameter": "id",
          "type": "string",
          "description": "ID of the video(s) to be deleted. Limit: 5."
        }
      ],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": [
        {
          "parameter": "data",
          "type": "string[]",
          "description": "An array of IDs of the videos that were deleted."
        }
      ]
    },
    {
      "title": "Send Whisper",
      "authentication": "",
      "pagination_support": {
        "forward": false,
        "reverse": false
      },
      "url": {
        "method": "POST",
        "url": "https://api.twitch.tv/helix/whispers"
      },
      "required_query_parameters": [],
      "required_body_parameters": [],
      "optional_query_parameters": [],
      "response_fields": []
    }
  ]
}